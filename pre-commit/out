/home/user/thefuck-master/pre_run_biend.py:3772: DeprecationWarning: invalid escape sequence \s
  f.write('$t1 \sim_n t_2$ & ' + ' & '.join(M6C) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3782: DeprecationWarning: invalid escape sequence \s
  f.write('$t1 \sim_n t_2$ & ' + ' & '.join(O6C) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3806: DeprecationWarning: invalid escape sequence \ 
  f.write('$extenion\ set$ & ' + ' & '.join(EXT_SET) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3807: DeprecationWarning: invalid escape sequence \ 
  f.write('$extenion\ event$ & ' + ' & '.join(EXT_EVENT) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3934: DeprecationWarning: invalid escape sequence \_
  d_ = d.replace('_', '\_')
/home/user/thefuck-master/pre_run_biend.py:3945: DeprecationWarning: invalid escape sequence \s
  f.write('$t1 \sim_n t_2$ & ' + ' & '.join(M6[:10]) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3955: DeprecationWarning: invalid escape sequence \s
  f.write('$t1 \sim_n t_2$ & ' + ' & '.join(M6[10:]) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3967: DeprecationWarning: invalid escape sequence \s
  f.write('$t1 \sim_n t_2$ & ' + ' & '.join(M6ov[:10]) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3979: DeprecationWarning: invalid escape sequence \s
  f.write('$t1 \sim_n t_2$ & ' + ' & '.join(M6ov[10:]) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:4101: DeprecationWarning: invalid escape sequence \_
  d_ = d.replace('_', '\_')
/home/user/purepython/cpython-3.9/my_purepy/lib/python3.9/site-packages/dash/testing/plugin.py:92: PytestDeprecationWarning: The hookimpl pytest_addhooks uses old-style configuration options (marks or attributes).
Please use the pytest.hookimpl(tryfirst=True) decorator instead
 to configure the hooks.
 See https://docs.pytest.org/en/latest/deprecations.html#configuring-hook-specs-impls-using-markers
  @pytest.mark.tryfirst
============================= test session starts ==============================
platform linux -- Python 3.9.15+, pytest-7.2.0, pluggy-1.0.0
rootdir: /home/user/pre-commit, configfile: tox.ini
plugins: mock-3.10.0, hypothesis-6.56.4, httpbin-1.0.2, cov-4.0.0, time-machine-2.9.0, html-3.2.0, Faker-15.3.4, anyio-3.6.2, flaky-3.7.0, hydra-core-1.3.2, xdist-3.2.1, test-utils-0.0.8, lazy-fixture-0.6.3, docker-1.0.1, xonsh-0.13.4, pylama-8.4.1, dash-2.9.1
collected 727 items

tests/all_languages_test.py .                                            [  0%]
tests/clientlib_test.py ................................................ [  6%]
                                                                         [  6%]
tests/color_test.py .........                                            [  7%]
tests/envcontext_test.py ............                                    [  9%]
tests/error_handler_test.py ..........                                   [ 11%]
tests/git_test.py ...........E..E.............FF..                       [ 15%]
tests/lang_base_test.py ....................                             [ 18%]
tests/logging_handler_test.py ..                                         [ 18%]
tests/main_test.py ....s......................                           [ 22%]
tests/output_test.py .                                                   [ 22%]
tests/parse_shebang_test.py ..................                           [ 24%]
tests/prefix_test.py .........                                           [ 25%]
tests/repository_test.py FFFFF.........FFF.FFFF..F..FF...FF              [ 30%]
tests/staged_files_only_test.py ............EEEEE.................F.     [ 35%]
tests/store_test.py ....................F                                [ 38%]
tests/util_test.py ............                                          [ 40%]
tests/xargs_test.py ....................xxx                              [ 43%]
tests/commands/autoupdate_test.py .................................      [ 47%]
tests/commands/clean_test.py ..                                          [ 48%]
tests/commands/gc_test.py ........                                       [ 49%]
tests/commands/hook_impl_test.py ....................................... [ 54%]
                                                                         [ 54%]
tests/commands/init_templatedir_test.py .......                          [ 55%]
tests/commands/install_uninstall_test.py .................F....F........ [ 59%]
.....F..................F....                                            [ 63%]
tests/commands/migrate_config_test.py .......                            [ 64%]
tests/commands/run_test.py ............................................. [ 70%]
.................................................                        [ 77%]
tests/commands/sample_config_test.py .                                   [ 77%]
tests/commands/try_repo_test.py .......                                  [ 78%]
tests/commands/validate_config_test.py ....                              [ 79%]
tests/commands/validate_manifest_test.py ..                              [ 79%]
tests/languages/conda_test.py .....                                      [ 80%]
tests/languages/coursier_test.py FFF                                     [ 80%]
tests/languages/dart_test.py FFF                                         [ 81%]
tests/languages/docker_image_test.py FF                                  [ 81%]
tests/languages/docker_test.py ..............F                           [ 83%]
tests/languages/dotnet_test.py FFFFF                                     [ 84%]
tests/languages/fail_test.py .                                           [ 84%]
tests/languages/golang_test.py ....FF.FF                                 [ 85%]
tests/languages/lua_test.py FF                                           [ 85%]
tests/languages/node_test.py ........FF.                                 [ 87%]
tests/languages/perl_test.py ..                                          [ 87%]
tests/languages/pygrep_test.py ....................                      [ 90%]
tests/languages/python_test.py ..............FFFFFFFFF                   [ 93%]
tests/languages/r_test.py ...........FF                                  [ 95%]
tests/languages/ruby_test.py .....FF....                                 [ 96%]
tests/languages/rust_test.py ...FFFFF                                    [ 97%]
tests/languages/script_test.py .                                         [ 98%]
tests/languages/swift_test.py F                                          [ 98%]
tests/languages/system_test.py .                                         [ 98%]
tests/meta_hooks/check_hooks_apply_test.py .....                         [ 99%]
tests/meta_hooks/check_useless_excludes_test.py ......                   [ 99%]
tests/meta_hooks/identity_test.py .                                      [100%]

==================================== ERRORS ====================================
____________ ERROR at setup of test_is_in_merge_conflict_submodule _____________

request = <FixtureRequest for <Function test_is_in_merge_conflict_submodule>>

    def fill(request):
        item = request._pyfuncitem
        fixturenames = getattr(item, "fixturenames", None)
        if fixturenames is None:
            fixturenames = request.fixturenames
    
        if hasattr(item, 'callspec'):
            for param, val in sorted_by_dependency(item.callspec.params, fixturenames):
                if val is not None and is_lazy_fixture(val):
                    item.callspec.params[param] = request.getfixturevalue(val.name)
                elif param not in item.funcargs:
                    item.funcargs[param] = request.getfixturevalue(param)
    
>       _fillfixtures()

../purepython/cpython-3.9/my_purepy/lib/python3.9/site-packages/pytest_lazyfixture.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/conftest.py:93: in in_conflicting_submodule
    cmd_output('git', 'submodule', 'add', git_dir_2, 'sub', cwd=git_dir_1)
pre_commit/util.py:116: in cmd_output
    returncode, stdout_b, stderr_b = cmd_output_b(*cmd, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_is_in_merge_conflict_subm0/1', 'sub')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_is_in_merge_conflict_subm0/0', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 128, stdout_b = b''
stderr_b = b"Cloning into '/tmp/pytest-of-user/pytest-363/test_is_in_merge_conflict_subm0/0/sub'...\nfatal: transport 'file' not ..._conflict_subm0/1' into submodule path '/tmp/pytest-of-user/pytest-363/test_is_in_merge_conflict_subm0/0/sub' failed\n"
proc = <Popen: returncode: 128 args: ('/usr/bin/git', 'submodule', 'add', '/tmp/pyt...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_is_in_merge_conflict_subm0/1', 'sub')
E           return code: 128
E           stdout: (none)
E           stderr:
E               Cloning into '/tmp/pytest-of-user/pytest-363/test_is_in_merge_conflict_subm0/0/sub'...
E               fatal: transport 'file' not allowed
E               fatal: clone of '/tmp/pytest-of-user/pytest-363/test_is_in_merge_conflict_subm0/1' into submodule path '/tmp/pytest-of-user/pytest-363/test_is_in_merge_conflict_subm0/0/sub' failed

pre_commit/util.py:110: CalledProcessError
___________ ERROR at setup of test_get_conflicted_files_in_submodule ___________

request = <FixtureRequest for <Function test_get_conflicted_files_in_submodule>>

    def fill(request):
        item = request._pyfuncitem
        fixturenames = getattr(item, "fixturenames", None)
        if fixturenames is None:
            fixturenames = request.fixturenames
    
        if hasattr(item, 'callspec'):
            for param, val in sorted_by_dependency(item.callspec.params, fixturenames):
                if val is not None and is_lazy_fixture(val):
                    item.callspec.params[param] = request.getfixturevalue(val.name)
                elif param not in item.funcargs:
                    item.funcargs[param] = request.getfixturevalue(param)
    
>       _fillfixtures()

../purepython/cpython-3.9/my_purepy/lib/python3.9/site-packages/pytest_lazyfixture.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/conftest.py:93: in in_conflicting_submodule
    cmd_output('git', 'submodule', 'add', git_dir_2, 'sub', cwd=git_dir_1)
pre_commit/util.py:116: in cmd_output
    returncode, stdout_b, stderr_b = cmd_output_b(*cmd, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_get_conflicted_files_in_s0/1', 'sub')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_get_conflicted_files_in_s0/0', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 128, stdout_b = b''
stderr_b = b"Cloning into '/tmp/pytest-of-user/pytest-363/test_get_conflicted_files_in_s0/0/sub'...\nfatal: transport 'file' not ...ted_files_in_s0/1' into submodule path '/tmp/pytest-of-user/pytest-363/test_get_conflicted_files_in_s0/0/sub' failed\n"
proc = <Popen: returncode: 128 args: ('/usr/bin/git', 'submodule', 'add', '/tmp/pyt...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_get_conflicted_files_in_s0/1', 'sub')
E           return code: 128
E           stdout: (none)
E           stderr:
E               Cloning into '/tmp/pytest-of-user/pytest-363/test_get_conflicted_files_in_s0/0/sub'...
E               fatal: transport 'file' not allowed
E               fatal: clone of '/tmp/pytest-of-user/pytest-363/test_get_conflicted_files_in_s0/1' into submodule path '/tmp/pytest-of-user/pytest-363/test_get_conflicted_files_in_s0/0/sub' failed

pre_commit/util.py:110: CalledProcessError
______________________ ERROR at setup of test_sub_staged _______________________

repo_with_commits = auto_namedtuple(path='/tmp/pytest-of-user/pytest-363/test_sub_staged0/0', rev1='a33888d20b335ef50fdb16857c5cabb2460fd5f2', rev2='1835e8f0f87a4fd555196dc651ebc300a1e75666')
tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x15283b87a140>

    @pytest.fixture
    def sub_staged(repo_with_commits, tempdir_factory):
        path = git_dir(tempdir_factory)
        with cwd(path):
            open('bar', 'a+').close()
            cmd_output('git', 'add', 'bar')
            git_commit()
>           cmd_output(
                'git', 'submodule', 'add', repo_with_commits.path, 'sub',
            )

/home/user/pre-commit/tests/staged_files_only_test.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/util.py:116: in cmd_output
    returncode, stdout_b, stderr_b = cmd_output_b(*cmd, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_sub_staged0/0', 'sub')
kwargs = {'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 128
stdout_b = b''
stderr_b = b"Cloning into '/tmp/pytest-of-user/pytest-363/test_sub_staged0/1/sub'...\nfatal: transport 'file' not allowed\nfatal:...er/pytest-363/test_sub_staged0/0' into submodule path '/tmp/pytest-of-user/pytest-363/test_sub_staged0/1/sub' failed\n"
proc = <Popen: returncode: 128 args: ('/usr/bin/git', 'submodule', 'add', '/tmp/pyt...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_sub_staged0/0', 'sub')
E           return code: 128
E           stdout: (none)
E           stderr:
E               Cloning into '/tmp/pytest-of-user/pytest-363/test_sub_staged0/1/sub'...
E               fatal: transport 'file' not allowed
E               fatal: clone of '/tmp/pytest-of-user/pytest-363/test_sub_staged0/0' into submodule path '/tmp/pytest-of-user/pytest-363/test_sub_staged0/1/sub' failed

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
_________________ ERROR at setup of test_sub_nothing_unstaged __________________

repo_with_commits = auto_namedtuple(path='/tmp/pytest-of-user/pytest-363/test_sub_nothing_unstaged0/0', rev1='40666ca6378bff9856f5247a689ba6685ee36334', rev2='2711da00eea05a5a34fc8d87e6d5cb6c491b07d4')
tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x15283abdffa0>

    @pytest.fixture
    def sub_staged(repo_with_commits, tempdir_factory):
        path = git_dir(tempdir_factory)
        with cwd(path):
            open('bar', 'a+').close()
            cmd_output('git', 'add', 'bar')
            git_commit()
>           cmd_output(
                'git', 'submodule', 'add', repo_with_commits.path, 'sub',
            )

/home/user/pre-commit/tests/staged_files_only_test.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/util.py:116: in cmd_output
    returncode, stdout_b, stderr_b = cmd_output_b(*cmd, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_sub_nothing_unstaged0/0', 'sub')
kwargs = {'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 128
stdout_b = b''
stderr_b = b"Cloning into '/tmp/pytest-of-user/pytest-363/test_sub_nothing_unstaged0/1/sub'...\nfatal: transport 'file' not allow...ub_nothing_unstaged0/0' into submodule path '/tmp/pytest-of-user/pytest-363/test_sub_nothing_unstaged0/1/sub' failed\n"
proc = <Popen: returncode: 128 args: ('/usr/bin/git', 'submodule', 'add', '/tmp/pyt...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_sub_nothing_unstaged0/0', 'sub')
E           return code: 128
E           stdout: (none)
E           stderr:
E               Cloning into '/tmp/pytest-of-user/pytest-363/test_sub_nothing_unstaged0/1/sub'...
E               fatal: transport 'file' not allowed
E               fatal: clone of '/tmp/pytest-of-user/pytest-363/test_sub_nothing_unstaged0/0' into submodule path '/tmp/pytest-of-user/pytest-363/test_sub_nothing_unstaged0/1/sub' failed

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
________________ ERROR at setup of test_sub_something_unstaged _________________

repo_with_commits = auto_namedtuple(path='/tmp/pytest-of-user/pytest-363/test_sub_something_unstaged0/0', rev1='8840039e084039120ed437121e99fb3311095653', rev2='9903d6f8af62092746e04a5cee5f220ad906f6e8')
tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x15283c0a4d70>

    @pytest.fixture
    def sub_staged(repo_with_commits, tempdir_factory):
        path = git_dir(tempdir_factory)
        with cwd(path):
            open('bar', 'a+').close()
            cmd_output('git', 'add', 'bar')
            git_commit()
>           cmd_output(
                'git', 'submodule', 'add', repo_with_commits.path, 'sub',
            )

/home/user/pre-commit/tests/staged_files_only_test.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/util.py:116: in cmd_output
    returncode, stdout_b, stderr_b = cmd_output_b(*cmd, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_sub_something_unstaged0/0', 'sub')
kwargs = {'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 128
stdout_b = b''
stderr_b = b"Cloning into '/tmp/pytest-of-user/pytest-363/test_sub_something_unstaged0/1/sub'...\nfatal: transport 'file' not all...omething_unstaged0/0' into submodule path '/tmp/pytest-of-user/pytest-363/test_sub_something_unstaged0/1/sub' failed\n"
proc = <Popen: returncode: 128 args: ('/usr/bin/git', 'submodule', 'add', '/tmp/pyt...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_sub_something_unstaged0/0', 'sub')
E           return code: 128
E           stdout: (none)
E           stderr:
E               Cloning into '/tmp/pytest-of-user/pytest-363/test_sub_something_unstaged0/1/sub'...
E               fatal: transport 'file' not allowed
E               fatal: clone of '/tmp/pytest-of-user/pytest-363/test_sub_something_unstaged0/0' into submodule path '/tmp/pytest-of-user/pytest-363/test_sub_something_unstaged0/1/sub' failed

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
__________ ERROR at setup of test_submodule_does_not_discard_changes ___________

repo_with_commits = auto_namedtuple(path='/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar0/0', rev1='8878feee37252abfaa52e5e8ec8b41252da01e7f', rev2='1b607b8a99202ded3a0eb3e87250a7850fec3810')
tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x15289173dc80>

    @pytest.fixture
    def sub_staged(repo_with_commits, tempdir_factory):
        path = git_dir(tempdir_factory)
        with cwd(path):
            open('bar', 'a+').close()
            cmd_output('git', 'add', 'bar')
            git_commit()
>           cmd_output(
                'git', 'submodule', 'add', repo_with_commits.path, 'sub',
            )

/home/user/pre-commit/tests/staged_files_only_test.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/util.py:116: in cmd_output
    returncode, stdout_b, stderr_b = cmd_output_b(*cmd, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar0/0', 'sub')
kwargs = {'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 128
stdout_b = b''
stderr_b = b"Cloning into '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar0/1/sub'...\nfatal: transport 'file' not ...oes_not_discar0/0' into submodule path '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar0/1/sub' failed\n"
proc = <Popen: returncode: 128 args: ('/usr/bin/git', 'submodule', 'add', '/tmp/pyt...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar0/0', 'sub')
E           return code: 128
E           stdout: (none)
E           stderr:
E               Cloning into '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar0/1/sub'...
E               fatal: transport 'file' not allowed
E               fatal: clone of '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar0/0' into submodule path '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar0/1/sub' failed

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
______ ERROR at setup of test_submodule_does_not_discard_changes_recurse _______

repo_with_commits = auto_namedtuple(path='/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar1/0', rev1='a6ab9d3f72b32aa38a8082f00e3b80e143cf588c', rev2='ae86a0a1df2909297214ed01976a52a146960212')
tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x15283f9a20f0>

    @pytest.fixture
    def sub_staged(repo_with_commits, tempdir_factory):
        path = git_dir(tempdir_factory)
        with cwd(path):
            open('bar', 'a+').close()
            cmd_output('git', 'add', 'bar')
            git_commit()
>           cmd_output(
                'git', 'submodule', 'add', repo_with_commits.path, 'sub',
            )

/home/user/pre-commit/tests/staged_files_only_test.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/util.py:116: in cmd_output
    returncode, stdout_b, stderr_b = cmd_output_b(*cmd, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar1/0', 'sub')
kwargs = {'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 128
stdout_b = b''
stderr_b = b"Cloning into '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar1/1/sub'...\nfatal: transport 'file' not ...oes_not_discar1/0' into submodule path '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar1/1/sub' failed\n"
proc = <Popen: returncode: 128 args: ('/usr/bin/git', 'submodule', 'add', '/tmp/pyt...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar1/0', 'sub')
E           return code: 128
E           stdout: (none)
E           stderr:
E               Cloning into '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar1/1/sub'...
E               fatal: transport 'file' not allowed
E               fatal: clone of '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar1/0' into submodule path '/tmp/pytest-of-user/pytest-363/test_submodule_does_not_discar1/1/sub' failed

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
=================================== FAILURES ===================================
______________________________ test_intent_to_add ______________________________

in_git_dir = local('/tmp/pytest-of-user/pytest-363/test_intent_to_add0/repo')

    def test_intent_to_add(in_git_dir):
        in_git_dir.join('a').ensure()
        cmd_output('git', 'add', '--intent-to-add', 'a')
    
>       assert git.intent_to_add_files() == ['a']
E       AssertionError: assert [] == ['a']
E         Right contains one more item: 'a'
E         Use -v to get more diff

/home/user/pre-commit/tests/git_test.py:241: AssertionError
________________________ test_status_output_with_rename ________________________

in_git_dir = local('/tmp/pytest-of-user/pytest-363/test_status_output_with_rename0/repo')

    def test_status_output_with_rename(in_git_dir):
        in_git_dir.join('a').write('1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n')
        cmd_output('git', 'add', 'a')
        git_commit()
        cmd_output('git', 'mv', 'a', 'b')
        in_git_dir.join('c').ensure()
        cmd_output('git', 'add', '--intent-to-add', 'c')
    
>       assert git.intent_to_add_files() == ['c']
E       AssertionError: assert [] == ['c']
E         Right contains one more item: 'c'
E         Use -v to get more diff

/home/user/pre-commit/tests/git_test.py:252: AssertionError
_______________________________ test_python_hook _______________________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x152894fb0e10>
store = <pre_commit.store.Store object at 0x152894eb9190>

    def test_python_hook(tempdir_factory, store):
>       _test_hook_repo(
            tempdir_factory, store, 'python_hooks_repo',
            'foo', [os.devnull],
            f'[{os.devnull!r}]\nHello World\n'.encode(),
        )

tests/repository_test.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:76: in _test_hook_repo
    hook = _get_hook(config, store, hook_id)
tests/repository_test.py:59: in _get_hook
    install_hook_envs([hook], store)
pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_python_hook0/0/.pre-commit/repo_52hxtt0/py_env-python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_python_hook0/0/.pre-commit/repo_52hxtt0/py_env-python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook0/1.
[INFO] Installing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook0/1.
[INFO] Once installed this environment will be reused.
[INFO] This may take a few minutes...
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook0/1.
INFO     pre_commit:repository.py:68 Installing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook0/1.
INFO     pre_commit:repository.py:69 Once installed this environment will be reused.
INFO     pre_commit:repository.py:70 This may take a few minutes...
_______________________ test_python_hook_default_version _______________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x15289442b730>
store = <pre_commit.store.Store object at 0x15289442ba00>

    def test_python_hook_default_version(tempdir_factory, store):
        # make sure that this continues to work for platforms where default
        # language detection does not work
        with mock.patch.object(
                python,
                'get_default_version',
                return_value=C.DEFAULT,
        ):
>           test_python_hook(tempdir_factory, store)

tests/repository_test.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:83: in test_python_hook
    _test_hook_repo(
tests/repository_test.py:76: in _test_hook_repo
    hook = _get_hook(config, store, hook_id)
tests/repository_test.py:59: in _get_hook
    install_hook_envs([hook], store)
pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_python_hook_default_versi0/0/.pre-commit/reporg7aoaaa/py_env-default')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_python_hook_default_versi0/0/.pre-commit/reporg7aoaaa/py_env-default')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook_default_versi0/1.
[INFO] Installing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook_default_versi0/1.
[INFO] Once installed this environment will be reused.
[INFO] This may take a few minutes...
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook_default_versi0/1.
INFO     pre_commit:repository.py:68 Installing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook_default_versi0/1.
INFO     pre_commit:repository.py:69 Once installed this environment will be reused.
INFO     pre_commit:repository.py:70 This may take a few minutes...
______________________ test_python_hook_args_with_spaces _______________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x15289368daa0>
store = <pre_commit.store.Store object at 0x15289368dd70>

    def test_python_hook_args_with_spaces(tempdir_factory, store):
>       _test_hook_repo(
            tempdir_factory, store, 'python_hooks_repo',
            'foo',
            [],
            b"['i have spaces', 'and\"\\'quotes', '$and !this']\n"
            b'Hello World\n',
            config_kwargs={
                'hooks': [{
                    'id': 'foo',
                    'args': ['i have spaces', 'and"\'quotes', '$and !this'],
                }],
            },
        )

tests/repository_test.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:76: in _test_hook_repo
    hook = _get_hook(config, store, hook_id)
tests/repository_test.py:59: in _get_hook
    install_hook_envs([hook], store)
pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_python_hook_args_with_spa0/0/.pre-commit/repouoepmx0j/py_env-python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_python_hook_args_with_spa0/0/.pre-commit/repouoepmx0j/py_env-python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook_args_with_spa0/1.
[INFO] Installing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook_args_with_spa0/1.
[INFO] Once installed this environment will be reused.
[INFO] This may take a few minutes...
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook_args_with_spa0/1.
INFO     pre_commit:repository.py:68 Installing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook_args_with_spa0/1.
INFO     pre_commit:repository.py:69 Once installed this environment will be reused.
INFO     pre_commit:repository.py:70 This may take a few minutes...
_______________________ test_python_hook_weird_setup_cfg _______________________

in_git_dir = local('/tmp/pytest-of-user/pytest-363/test_python_hook_weird_setup_c0/repo')
tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x152892b3d050>
store = <pre_commit.store.Store object at 0x152892b3d5a0>

    def test_python_hook_weird_setup_cfg(in_git_dir, tempdir_factory, store):
        in_git_dir.join('setup.cfg').write('[install]\ninstall_scripts=/usr/sbin')
    
>       _test_hook_repo(
            tempdir_factory, store, 'python_hooks_repo',
            'foo', [os.devnull],
            f'[{os.devnull!r}]\nHello World\n'.encode(),
        )

/home/user/pre-commit/tests/repository_test.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/tests/repository_test.py:76: in _test_hook_repo
    hook = _get_hook(config, store, hook_id)
/home/user/pre-commit/tests/repository_test.py:59: in _get_hook
    install_hook_envs([hook], store)
/home/user/pre-commit/pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
/home/user/pre-commit/pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
/home/user/pre-commit/pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_python_hook_weird_setup_c0/0/.pre-commit/repoum2llcjw/py_env-python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_python_hook_weird_setup_c0/0/.pre-commit/repoum2llcjw/py_env-python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook_weird_setup_c0/1.
[INFO] Installing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook_weird_setup_c0/1.
[INFO] Once installed this environment will be reused.
[INFO] This may take a few minutes...
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook_weird_setup_c0/1.
INFO     pre_commit:repository.py:68 Installing environment for file:///tmp/pytest-of-user/pytest-363/test_python_hook_weird_setup_c0/1.
INFO     pre_commit:repository.py:69 Once installed this environment will be reused.
INFO     pre_commit:repository.py:70 This may take a few minutes...
_________________________ test_python_venv_deprecation _________________________

store = <pre_commit.store.Store object at 0x152891fbd2d0>
caplog = <_pytest.logging.LogCaptureFixture object at 0x152891fbd4b0>

    def test_python_venv_deprecation(store, caplog):
        config = {
            'repo': 'local',
            'hooks': [{
                'id': 'example',
                'name': 'example',
                'language': 'python_venv',
                'entry': 'echo hi',
            }],
        }
>       _get_hook(config, store, 'example')

tests/repository_test.py:137: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:59: in _get_hook
    install_hook_envs([hook], store)
pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_python_venv_deprecation0/0/.pre-commit/repod1lkoruu/py_env-python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_python_venv_deprecation0/0/.pre-commit/repod1lkoruu/py_env-python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for local.
[INFO] Installing environment for local.
[INFO] Once installed this environment will be reused.
[INFO] This may take a few minutes...
[WARNING] `repo: local` uses deprecated `language: python_venv`.  This is an alias for `language: python`.  Often `pre-commit autoupdate --repo local` will fix this.
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for local.
INFO     pre_commit:repository.py:68 Installing environment for local.
INFO     pre_commit:repository.py:69 Once installed this environment will be reused.
INFO     pre_commit:repository.py:70 This may take a few minutes...
WARNING  pre_commit:repository.py:73 `repo: local` uses deprecated `language: python_venv`.  This is an alias for `language: python`.  Often `pre-commit autoupdate --repo local` will fix this.
__________________ test_additional_dependencies_roll_forward ___________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x1528921845a0>
store = <pre_commit.store.Store object at 0x1528932c3320>

    def test_additional_dependencies_roll_forward(tempdir_factory, store):
        path = make_repo(tempdir_factory, 'python_hooks_repo')
    
        config1 = make_config_from_repo(path)
>       hook1 = _get_hook(config1, store, 'foo')

tests/repository_test.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:59: in _get_hook
    install_hook_envs([hook], store)
pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_additional_dependencies_r0/0/.pre-commit/repouurlp075/py_env-python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_additional_dependencies_r0/0/.pre-commit/repouurlp075/py_env-python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_additional_dependencies_r0/1.
[INFO] Installing environment for file:///tmp/pytest-of-user/pytest-363/test_additional_dependencies_r0/1.
[INFO] Once installed this environment will be reused.
[INFO] This may take a few minutes...
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_additional_dependencies_r0/1.
INFO     pre_commit:repository.py:68 Installing environment for file:///tmp/pytest-of-user/pytest-363/test_additional_dependencies_r0/1.
INFO     pre_commit:repository.py:69 Once installed this environment will be reused.
INFO     pre_commit:repository.py:70 This may take a few minutes...
___________________ test_repository_state_compatibility[v1] ____________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x15289613f190>
store = <pre_commit.store.Store object at 0x1528b6c5f370>, v = 'v1'

    @pytest.mark.parametrize('v', ('v1', 'v2'))
    def test_repository_state_compatibility(tempdir_factory, store, v):
        path = make_repo(tempdir_factory, 'python_hooks_repo')
    
        config = make_config_from_repo(path)
>       hook = _get_hook(config, store, 'foo')

tests/repository_test.py:260: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:59: in _get_hook
    install_hook_envs([hook], store)
pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_repository_state_compatib0/0/.pre-commit/repojqnfev7j/py_env-python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_repository_state_compatib0/0/.pre-commit/repojqnfev7j/py_env-python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_repository_state_compatib0/1.
[INFO] Installing environment for file:///tmp/pytest-of-user/pytest-363/test_repository_state_compatib0/1.
[INFO] Once installed this environment will be reused.
[INFO] This may take a few minutes...
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_repository_state_compatib0/1.
INFO     pre_commit:repository.py:68 Installing environment for file:///tmp/pytest-of-user/pytest-363/test_repository_state_compatib0/1.
INFO     pre_commit:repository.py:69 Once installed this environment will be reused.
INFO     pre_commit:repository.py:70 This may take a few minutes...
___________________ test_repository_state_compatibility[v2] ____________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x15283fd5de10>
store = <pre_commit.store.Store object at 0x1528973293c0>, v = 'v2'

    @pytest.mark.parametrize('v', ('v1', 'v2'))
    def test_repository_state_compatibility(tempdir_factory, store, v):
        path = make_repo(tempdir_factory, 'python_hooks_repo')
    
        config = make_config_from_repo(path)
>       hook = _get_hook(config, store, 'foo')

tests/repository_test.py:260: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:59: in _get_hook
    install_hook_envs([hook], store)
pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_repository_state_compatib1/0/.pre-commit/repobgir37w9/py_env-python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_repository_state_compatib1/0/.pre-commit/repobgir37w9/py_env-python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_repository_state_compatib1/1.
[INFO] Installing environment for file:///tmp/pytest-of-user/pytest-363/test_repository_state_compatib1/1.
[INFO] Once installed this environment will be reused.
[INFO] This may take a few minutes...
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_repository_state_compatib1/1.
INFO     pre_commit:repository.py:68 Installing environment for file:///tmp/pytest-of-user/pytest-363/test_repository_state_compatib1/1.
INFO     pre_commit:repository.py:69 Once installed this environment will be reused.
INFO     pre_commit:repository.py:70 This may take a few minutes...
________________________________ test_reinstall ________________________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x1528b6bd7820>
store = <pre_commit.store.Store object at 0x1528b6bd7aa0>
log_info_mock = <MagicMock name='info' id='23264608746704'>

    def test_reinstall(tempdir_factory, store, log_info_mock):
        path = make_repo(tempdir_factory, 'python_hooks_repo')
        config = make_config_from_repo(path)
>       _get_hook(config, store, 'foo')

tests/repository_test.py:290: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:59: in _get_hook
    install_hook_envs([hook], store)
pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_reinstall0/0/.pre-commit/repohf4vcoon/py_env-python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_reinstall0/0/.pre-commit/repohf4vcoon/py_env-python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
_____________________ test_control_c_control_c_on_install ______________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x15283e8dca00>
store = <pre_commit.store.Store object at 0x15283e8dc9b0>

    def test_control_c_control_c_on_install(tempdir_factory, store):
        """Regression test for #186."""
        path = make_repo(tempdir_factory, 'python_hooks_repo')
        config = make_config_from_repo(path)
        hooks = [_get_hook_no_install(config, store, 'foo')]
    
        class MyKeyboardInterrupt(KeyboardInterrupt):
            pass
    
        # To simulate a killed install, we'll make PythonEnv.run raise ^C
        # and then to simulate a second ^C during cleanup, we'll make shutil.rmtree
        # raise as well.
        with pytest.raises(MyKeyboardInterrupt):
            with mock.patch.object(
                lang_base, 'setup_cmd', side_effect=MyKeyboardInterrupt,
            ):
                with mock.patch.object(
                    shutil, 'rmtree', side_effect=MyKeyboardInterrupt,
                ):
>                   install_hook_envs(hooks, store)

tests/repository_test.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_control_c_control_c_on_in0/0/.pre-commit/repomlr98oat/py_env-python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_control_c_control_c_on_in0/0/.pre-commit/repomlr98oat/py_env-python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_control_c_control_c_on_in0/1.
[INFO] Installing environment for file:///tmp/pytest-of-user/pytest-363/test_control_c_control_c_on_in0/1.
[INFO] Once installed this environment will be reused.
[INFO] This may take a few minutes...
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_control_c_control_c_on_in0/1.
INFO     pre_commit:repository.py:68 Installing environment for file:///tmp/pytest-of-user/pytest-363/test_control_c_control_c_on_in0/1.
INFO     pre_commit:repository.py:69 Once installed this environment will be reused.
INFO     pre_commit:repository.py:70 This may take a few minutes...
_________________________ test_invalidated_virtualenv __________________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x15283e0cc9b0>
store = <pre_commit.store.Store object at 0x15283e0ccc80>

    def test_invalidated_virtualenv(tempdir_factory, store):
        # A cached virtualenv may become invalidated if the system python upgrades
        # This should not cause every hook in that virtualenv to fail.
        path = make_repo(tempdir_factory, 'python_hooks_repo')
        config = make_config_from_repo(path)
>       hook = _get_hook(config, store, 'foo')

tests/repository_test.py:342: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:59: in _get_hook
    install_hook_envs([hook], store)
pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_invalidated_virtualenv0/0/.pre-commit/repo42d7ji6h/py_env-python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_invalidated_virtualenv0/0/.pre-commit/repo42d7ji6h/py_env-python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_invalidated_virtualenv0/1.
[INFO] Installing environment for file:///tmp/pytest-of-user/pytest-363/test_invalidated_virtualenv0/1.
[INFO] Once installed this environment will be reused.
[INFO] This may take a few minutes...
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_invalidated_virtualenv0/1.
INFO     pre_commit:repository.py:68 Installing environment for file:///tmp/pytest-of-user/pytest-363/test_invalidated_virtualenv0/1.
INFO     pre_commit:repository.py:69 Once installed this environment will be reused.
INFO     pre_commit:repository.py:70 This may take a few minutes...
_________________________ test_really_long_file_paths __________________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x15283d728460>
store = <pre_commit.store.Store object at 0x15283d7282d0>

    def test_really_long_file_paths(tempdir_factory, store):
        base_path = tempdir_factory.get()
        really_long_path = os.path.join(base_path, 'really_long' * 10)
        cmd_output_b('git', 'init', really_long_path)
    
        path = make_repo(tempdir_factory, 'python_hooks_repo')
        config = make_config_from_repo(path)
    
        with cwd(really_long_path):
>           _get_hook(config, store, 'foo')

tests/repository_test.py:371: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:59: in _get_hook
    install_hook_envs([hook], store)
pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_really_long_file_paths0/0/.pre-commit/repowiz7i231/py_env-python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_really_long_file_paths0/0/.pre-commit/repowiz7i231/py_env-python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_really_long_file_paths0/2.
[INFO] Installing environment for file:///tmp/pytest-of-user/pytest-363/test_really_long_file_paths0/2.
[INFO] Once installed this environment will be reused.
[INFO] This may take a few minutes...
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_really_long_file_paths0/2.
INFO     pre_commit:repository.py:68 Installing environment for file:///tmp/pytest-of-user/pytest-363/test_really_long_file_paths0/2.
INFO     pre_commit:repository.py:69 Once installed this environment will be reused.
INFO     pre_commit:repository.py:70 This may take a few minutes...
____________________________ test_local_python_repo ____________________________

store = <pre_commit.store.Store object at 0x15283e32c780>
local_python_config = {'hooks': [{'additional_dependencies': ['/home/user/pre-commit/testing/resources/python_hooks_repo'], 'alias': '', 'always_run': False, 'args': [], ...}], 'repo': 'local'}

    def test_local_python_repo(store, local_python_config):
>       hook = _get_hook(local_python_config, store, 'foo')

tests/repository_test.py:422: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:59: in _get_hook
    install_hook_envs([hook], store)
pre_commit/repository.py:248: in install_hook_envs
    _hook_install(hook)
pre_commit/repository.py:95: in _hook_install
    lang.install_environment(
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_local_python_repo0/0/.pre-commit/repouqjuhkx0/py_env-python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_local_python_repo0/0/.pre-commit/repouqjuhkx0/py_env-python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for local:/home/user/pre-commit/testing/resources/python_hooks_repo.
[INFO] Installing environment for local.
[INFO] Once installed this environment will be reused.
[INFO] This may take a few minutes...
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for local:/home/user/pre-commit/testing/resources/python_hooks_repo.
INFO     pre_commit:repository.py:68 Installing environment for local.
INFO     pre_commit:repository.py:69 Once installed this environment will be reused.
INFO     pre_commit:repository.py:70 This may take a few minutes...
___________________________ test_hook_id_not_present ___________________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x152896e9ddc0>
store = <pre_commit.store.Store object at 0x15283cd6a280>
caplog = <_pytest.logging.LogCaptureFixture object at 0x15283cd6a5a0>

    def test_hook_id_not_present(tempdir_factory, store, caplog):
        path = make_repo(tempdir_factory, 'script_hooks_repo')
        config = make_config_from_repo(path)
        config['hooks'][0]['id'] = 'i-dont-exist'
        with pytest.raises(SystemExit):
>           _get_hook(config, store, 'i-dont-exist')

tests/repository_test.py:469: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:58: in _get_hook
    hook = _get_hook_no_install(repo_config, store, hook_id)
tests/repository_test.py:52: in _get_hook_no_install
    hooks = all_hooks(config, store)
pre_commit/repository.py:252: in all_hooks
    return tuple(
pre_commit/repository.py:255: in <genexpr>
    for hook in _repository_hooks(repo, store, root_config)
pre_commit/repository.py:230: in _repository_hooks
    return _cloned_repository_hooks(repo_config, store, root_config)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

repo_config = {'hooks': [{'id': 'i-dont-exist'}], 'repo': 'file:///tmp/pytest-of-user/pytest-363/test_hook_id_not_present0/1', 'rev': '86f8933869ffcf7d2b98c8171f8e366f916bdf54'}
store = <pre_commit.store.Store object at 0x15283cd6a280>
root_config = {'default_install_hook_types': ['pre-commit'], 'default_language_version': {'conda': 'default', 'coursier': 'default',...s': ('commit', 'merge-commit', 'prepare-commit-msg', 'commit-msg', 'post-commit', 'manual', ...), 'exclude': '^$', ...}

    def _cloned_repository_hooks(
            repo_config: dict[str, Any],
            store: Store,
            root_config: dict[str, Any],
    ) -> tuple[Hook, ...]:
        repo, rev = repo_config['repo'], repo_config['rev']
        manifest_path = os.path.join(store.clone(repo, rev), C.MANIFEST_FILE)
        by_id = {hook['id']: hook for hook in load_manifest(manifest_path)}
    
        for hook in repo_config['hooks']:
            if hook['id'] not in by_id:
                logger.error(
                    f'`{hook["id"]}` is not present in repository {repo}.  '
                    f'Typo? Perhaps it is introduced in a newer version?  '
                    f'Often `pre-commit autoupdate` fixes this.',
                )
>               exit(1)
E               NameError: name 'exit' is not defined

pre_commit/repository.py:206: NameError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_hook_id_not_present0/1.
[ERROR] `i-dont-exist` is not present in repository file:///tmp/pytest-of-user/pytest-363/test_hook_id_not_present0/1.  Typo? Perhaps it is introduced in a newer version?  Often `pre-commit autoupdate` fixes this.
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_hook_id_not_present0/1.
ERROR    pre_commit:repository.py:201 `i-dont-exist` is not present in repository file:///tmp/pytest-of-user/pytest-363/test_hook_id_not_present0/1.  Typo? Perhaps it is introduced in a newer version?  Often `pre-commit autoupdate` fixes this.
_____________________________ test_too_new_version _____________________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x152894418be0>
store = <pre_commit.store.Store object at 0x152894418b40>
caplog = <_pytest.logging.LogCaptureFixture object at 0x152894418910>

    def test_too_new_version(tempdir_factory, store, caplog):
        path = make_repo(tempdir_factory, 'script_hooks_repo')
        with modify_manifest(path) as manifest:
            manifest[0]['minimum_pre_commit_version'] = '999.0.0'
        config = make_config_from_repo(path)
        with pytest.raises(SystemExit):
>           _get_hook(config, store, 'bash_hook')

tests/repository_test.py:484: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:58: in _get_hook
    hook = _get_hook_no_install(repo_config, store, hook_id)
tests/repository_test.py:52: in _get_hook_no_install
    hooks = all_hooks(config, store)
pre_commit/repository.py:252: in all_hooks
    return tuple(
pre_commit/repository.py:255: in <genexpr>
    for hook in _repository_hooks(repo, store, root_config)
pre_commit/repository.py:230: in _repository_hooks
    return _cloned_repository_hooks(repo_config, store, root_config)
pre_commit/repository.py:208: in _cloned_repository_hooks
    hook_dcts = [
pre_commit/repository.py:209: in <listcomp>
    _hook(by_id[hook['id']], hook, root_config=root_config)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

root_config = {'default_install_hook_types': ['pre-commit'], 'default_language_version': {'conda': 'default', 'coursier': 'default',...s': ('commit', 'merge-commit', 'prepare-commit-msg', 'commit-msg', 'post-commit', 'manual', ...), 'exclude': '^$', ...}
hook_dicts = ({'additional_dependencies': [], 'alias': '', 'always_run': False, 'args': [], ...}, {'id': 'bash_hook'})
ret = {'additional_dependencies': [], 'alias': '', 'always_run': False, 'args': [], ...}
rest = ({'id': 'bash_hook'},)

    def _hook(
            *hook_dicts: dict[str, Any],
            root_config: dict[str, Any],
    ) -> dict[str, Any]:
        ret, rest = dict(hook_dicts[0]), hook_dicts[1:]
        for dct in rest:
            ret.update(dct)
    
        version = ret['minimum_pre_commit_version']
        if parse_version(version) > parse_version(C.VERSION):
            logger.error(
                f'The hook `{ret["id"]}` requires pre-commit version {version} '
                f'but version {C.VERSION} is installed.  '
                f'Perhaps run `pip install --upgrade pre-commit`.',
            )
>           exit(1)
E           NameError: name 'exit' is not defined

pre_commit/repository.py:134: NameError
----------------------------- Captured stdout call -----------------------------
[INFO] Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_too_new_version0/1.
[ERROR] The hook `bash_hook` requires pre-commit version 999.0.0 but version 3.1.1 is installed.  Perhaps run `pip install --upgrade pre-commit`.
------------------------------ Captured log call -------------------------------
INFO     pre_commit:store.py:159 Initializing environment for file:///tmp/pytest-of-user/pytest-363/test_too_new_version0/1.
ERROR    pre_commit:repository.py:129 The hook `bash_hook` requires pre-commit version 999.0.0 but version 3.1.1 is installed.  Perhaps run `pip install --upgrade pre-commit`.
_____________ test_non_installable_hook_error_for_language_version _____________

store = <pre_commit.store.Store object at 0x15288c392870>
caplog = <_pytest.logging.LogCaptureFixture object at 0x15288c392c80>

    def test_non_installable_hook_error_for_language_version(store, caplog):
        config = {
            'repo': 'local',
            'hooks': [{
                'id': 'system-hook',
                'name': 'system-hook',
                'language': 'system',
                'entry': 'python3 -c "import sys; print(sys.version)"',
                'language_version': 'python3.10',
            }],
        }
        with pytest.raises(SystemExit) as excinfo:
>           _get_hook(config, store, 'system-hook')

tests/repository_test.py:553: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:58: in _get_hook
    hook = _get_hook_no_install(repo_config, store, hook_id)
tests/repository_test.py:52: in _get_hook_no_install
    hooks = all_hooks(config, store)
pre_commit/repository.py:252: in all_hooks
    return tuple(
pre_commit/repository.py:255: in <genexpr>
    for hook in _repository_hooks(repo, store, root_config)
pre_commit/repository.py:228: in _repository_hooks
    return _non_cloned_repository_hooks(repo_config, store, root_config)
pre_commit/repository.py:180: in _non_cloned_repository_hooks
    return tuple(
pre_commit/repository.py:184: in <genexpr>
    _hook(hook, root_config=root_config),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

root_config = {'default_install_hook_types': ['pre-commit'], 'default_language_version': {'conda': 'default', 'coursier': 'default',...s': ('commit', 'merge-commit', 'prepare-commit-msg', 'commit-msg', 'post-commit', 'manual', ...), 'exclude': '^$', ...}
hook_dicts = ({'additional_dependencies': [], 'alias': '', 'always_run': False, 'args': [], ...},)
ret = {'additional_dependencies': [], 'alias': '', 'always_run': False, 'args': [], ...}
rest = ()

    def _hook(
            *hook_dicts: dict[str, Any],
            root_config: dict[str, Any],
    ) -> dict[str, Any]:
        ret, rest = dict(hook_dicts[0]), hook_dicts[1:]
        for dct in rest:
            ret.update(dct)
    
        version = ret['minimum_pre_commit_version']
        if parse_version(version) > parse_version(C.VERSION):
            logger.error(
                f'The hook `{ret["id"]}` requires pre-commit version {version} '
                f'but version {C.VERSION} is installed.  '
                f'Perhaps run `pip install --upgrade pre-commit`.',
            )
            exit(1)
    
        lang = ret['language']
        if ret['language_version'] == C.DEFAULT:
            ret['language_version'] = root_config['default_language_version'][lang]
        if ret['language_version'] == C.DEFAULT:
            ret['language_version'] = languages[lang].get_default_version()
    
        if not ret['stages']:
            ret['stages'] = root_config['default_stages']
    
        if languages[lang].ENVIRONMENT_DIR is None:
            if ret['language_version'] != C.DEFAULT:
                logger.error(
                    f'The hook `{ret["id"]}` specifies `language_version` but is '
                    f'using language `{lang}` which does not install an '
                    f'environment.  '
                    f'Perhaps you meant to use a specific language?',
                )
>               exit(1)
E               NameError: name 'exit' is not defined

pre_commit/repository.py:153: NameError
----------------------------- Captured stdout call -----------------------------
[ERROR] The hook `system-hook` specifies `language_version` but is using language `system` which does not install an environment.  Perhaps you meant to use a specific language?
------------------------------ Captured log call -------------------------------
ERROR    pre_commit:repository.py:147 The hook `system-hook` specifies `language_version` but is using language `system` which does not install an environment.  Perhaps you meant to use a specific language?
_________ test_non_installable_hook_error_for_additional_dependencies __________

store = <pre_commit.store.Store object at 0x15283f99d5a0>
caplog = <_pytest.logging.LogCaptureFixture object at 0x15283f99df50>

    def test_non_installable_hook_error_for_additional_dependencies(store, caplog):
        config = {
            'repo': 'local',
            'hooks': [{
                'id': 'system-hook',
                'name': 'system-hook',
                'language': 'system',
                'entry': 'python3 -c "import sys; print(sys.version)"',
                'additional_dependencies': ['astpretty'],
            }],
        }
        with pytest.raises(SystemExit) as excinfo:
>           _get_hook(config, store, 'system-hook')

tests/repository_test.py:576: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/repository_test.py:58: in _get_hook
    hook = _get_hook_no_install(repo_config, store, hook_id)
tests/repository_test.py:52: in _get_hook_no_install
    hooks = all_hooks(config, store)
pre_commit/repository.py:252: in all_hooks
    return tuple(
pre_commit/repository.py:255: in <genexpr>
    for hook in _repository_hooks(repo, store, root_config)
pre_commit/repository.py:228: in _repository_hooks
    return _non_cloned_repository_hooks(repo_config, store, root_config)
pre_commit/repository.py:180: in _non_cloned_repository_hooks
    return tuple(
pre_commit/repository.py:184: in <genexpr>
    _hook(hook, root_config=root_config),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

root_config = {'default_install_hook_types': ['pre-commit'], 'default_language_version': {'conda': 'default', 'coursier': 'default',...s': ('commit', 'merge-commit', 'prepare-commit-msg', 'commit-msg', 'post-commit', 'manual', ...), 'exclude': '^$', ...}
hook_dicts = ({'additional_dependencies': ['astpretty'], 'alias': '', 'always_run': False, 'args': [], ...},)
ret = {'additional_dependencies': ['astpretty'], 'alias': '', 'always_run': False, 'args': [], ...}
rest = ()

    def _hook(
            *hook_dicts: dict[str, Any],
            root_config: dict[str, Any],
    ) -> dict[str, Any]:
        ret, rest = dict(hook_dicts[0]), hook_dicts[1:]
        for dct in rest:
            ret.update(dct)
    
        version = ret['minimum_pre_commit_version']
        if parse_version(version) > parse_version(C.VERSION):
            logger.error(
                f'The hook `{ret["id"]}` requires pre-commit version {version} '
                f'but version {C.VERSION} is installed.  '
                f'Perhaps run `pip install --upgrade pre-commit`.',
            )
            exit(1)
    
        lang = ret['language']
        if ret['language_version'] == C.DEFAULT:
            ret['language_version'] = root_config['default_language_version'][lang]
        if ret['language_version'] == C.DEFAULT:
            ret['language_version'] = languages[lang].get_default_version()
    
        if not ret['stages']:
            ret['stages'] = root_config['default_stages']
    
        if languages[lang].ENVIRONMENT_DIR is None:
            if ret['language_version'] != C.DEFAULT:
                logger.error(
                    f'The hook `{ret["id"]}` specifies `language_version` but is '
                    f'using language `{lang}` which does not install an '
                    f'environment.  '
                    f'Perhaps you meant to use a specific language?',
                )
                exit(1)
            if ret['additional_dependencies']:
                logger.error(
                    f'The hook `{ret["id"]}` specifies `additional_dependencies` '
                    f'but is using language `{lang}` which does not install an '
                    f'environment.  '
                    f'Perhaps you meant to use a specific language?',
                )
>               exit(1)
E               NameError: name 'exit' is not defined

pre_commit/repository.py:161: NameError
----------------------------- Captured stdout call -----------------------------
[ERROR] The hook `system-hook` specifies `additional_dependencies` but is using language `system` which does not install an environment.  Perhaps you meant to use a specific language?
------------------------------ Captured log call -------------------------------
ERROR    pre_commit:repository.py:155 The hook `system-hook` specifies `additional_dependencies` but is using language `system` which does not install an environment.  Perhaps you meant to use a specific language?
______________________________ test_intent_to_add ______________________________

in_git_dir = local('/tmp/pytest-of-user/pytest-363/test_intent_to_add1/repo')
patch_dir = '/tmp/pytest-of-user/pytest-363/test_intent_to_add1/0'

    def test_intent_to_add(in_git_dir, patch_dir):
        """Regression test for #881"""
        _write(b'hello\nworld\n')
        cmd_output('git', 'add', '--intent-to-add', 'foo')
    
>       assert git.intent_to_add_files() == ['foo']
E       AssertionError: assert [] == ['foo']
E         Right contains one more item: 'foo'
E         Use -v to get more diff

/home/user/pre-commit/tests/staged_files_only_test.py:385: AssertionError
_____________________ test_clone_with_recursive_submodules _____________________

store = <pre_commit.store.Store object at 0x1528366a7d70>
tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_clone_with_recursive_subm0')

    def test_clone_with_recursive_submodules(store, tmp_path):
        sub = tmp_path.joinpath('sub')
        sub.mkdir()
        sub.joinpath('submodule').write_text('i am a submodule')
        cmd_output('git', '-C', str(sub), 'init', '.')
        cmd_output('git', '-C', str(sub), 'add', '.')
        git.commit(str(sub))
    
        repo = tmp_path.joinpath('repo')
        repo.mkdir()
        repo.joinpath('repository').write_text('i am a repo')
        cmd_output('git', '-C', str(repo), 'init', '.')
        cmd_output('git', '-C', str(repo), 'add', '.')
>       cmd_output('git', '-C', str(repo), 'submodule', 'add', str(sub), 'sub')

tests/store_test.py:264: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pre_commit/util.py:116: in cmd_output
    returncode, stdout_b, stderr_b = cmd_output_b(*cmd, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/usr/bin/git', '-C', '/tmp/pytest-of-user/pytest-363/test_clone_with_recursive_subm0/repo', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_clone_with_recursive_subm0/sub', ...)
kwargs = {'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 128
stdout_b = b''
stderr_b = b"Cloning into '/tmp/pytest-of-user/pytest-363/test_clone_with_recursive_subm0/repo/sub'...\nfatal: transport 'file' n...sive_subm0/sub' into submodule path '/tmp/pytest-of-user/pytest-363/test_clone_with_recursive_subm0/repo/sub' failed\n"
proc = <Popen: returncode: 128 args: ('/usr/bin/git', '-C', '/tmp/pytest-of-user/py...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/usr/bin/git', '-C', '/tmp/pytest-of-user/pytest-363/test_clone_with_recursive_subm0/repo', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_clone_with_recursive_subm0/sub', 'sub')
E           return code: 128
E           stdout: (none)
E           stderr:
E               Cloning into '/tmp/pytest-of-user/pytest-363/test_clone_with_recursive_subm0/repo/sub'...
E               fatal: transport 'file' not allowed
E               fatal: clone of '/tmp/pytest-of-user/pytest-363/test_clone_with_recursive_subm0/sub' into submodule path '/tmp/pytest-of-user/pytest-363/test_clone_with_recursive_subm0/repo/sub' failed

pre_commit/util.py:110: CalledProcessError
______________________ test_install_in_submodule_and_run _______________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x152826485230>
store = <pre_commit.store.Store object at 0x1528264853c0>

    def test_install_in_submodule_and_run(tempdir_factory, store):
        src_path = make_consuming_repo(tempdir_factory, 'script_hooks_repo')
        parent_path = git_dir(tempdir_factory)
>       cmd_output('git', 'submodule', 'add', src_path, 'sub', cwd=parent_path)

tests/commands/install_uninstall_test.py:179: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pre_commit/util.py:116: in cmd_output
    returncode, stdout_b, stderr_b = cmd_output_b(*cmd, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_install_in_submodule_and_0/2', 'sub')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_install_in_submodule_and_0/3', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 128, stdout_b = b''
stderr_b = b"Cloning into '/tmp/pytest-of-user/pytest-363/test_install_in_submodule_and_0/3/sub'...\nfatal: transport 'file' not ...submodule_and_0/2' into submodule path '/tmp/pytest-of-user/pytest-363/test_install_in_submodule_and_0/3/sub' failed\n"
proc = <Popen: returncode: 128 args: ('/usr/bin/git', 'submodule', 'add', '/tmp/pyt...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/usr/bin/git', 'submodule', 'add', '/tmp/pytest-of-user/pytest-363/test_install_in_submodule_and_0/2', 'sub')
E           return code: 128
E           stdout: (none)
E           stderr:
E               Cloning into '/tmp/pytest-of-user/pytest-363/test_install_in_submodule_and_0/3/sub'...
E               fatal: transport 'file' not allowed
E               fatal: clone of '/tmp/pytest-of-user/pytest-363/test_install_in_submodule_and_0/2' into submodule path '/tmp/pytest-of-user/pytest-363/test_install_in_submodule_and_0/3/sub' failed

pre_commit/util.py:110: CalledProcessError
_________________________ test_environment_not_sourced _________________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x152896eb6e10>
store = <pre_commit.store.Store object at 0x152896eb6dc0>

    def test_environment_not_sourced(tempdir_factory, store):
        path = make_consuming_repo(tempdir_factory, 'script_hooks_repo')
        with cwd(path):
            assert not install(C.CONFIG_FILE, store, hook_types=['pre-commit'])
            # simulate deleting the virtualenv by rewriting the exe
            hook = os.path.join(path, '.git/hooks/pre-commit')
            with open(hook) as f:
                src = f.read()
            src = re.sub('\nINSTALL_PYTHON=.*\n', '\nINSTALL_PYTHON="/dne"\n', src)
            with open(hook, 'w') as f:
                f.write(src)
    
            # Use a specific homedir to ignore --user installs
            homedir = tempdir_factory.get()
            env = {
                'HOME': homedir,
                'PATH': _path_without_us(),
                # Git needs this to make a commit
>               'GIT_AUTHOR_NAME': os.environ['GIT_AUTHOR_NAME'],
                'GIT_COMMITTER_NAME': os.environ['GIT_COMMITTER_NAME'],
                'GIT_AUTHOR_EMAIL': os.environ['GIT_AUTHOR_EMAIL'],
                'GIT_COMMITTER_EMAIL': os.environ['GIT_COMMITTER_EMAIL'],
            }

tests/commands/install_uninstall_test.py:283: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = environ({'CONDA_SHLVL': '2', 'LD_LIBRARY_PATH': '/home/user/g09/g09/bsd:/home/user/g09/g09/local:/home/user/g09/g09/ex..._COMMIT': '1', 'PYTEST_CURRENT_TEST': 'tests/commands/install_uninstall_test.py::test_environment_not_sourced (call)'})
key = 'GIT_AUTHOR_NAME'

    def __getitem__(self, key):
        try:
            value = self._data[self.encodekey(key)]
        except KeyError:
            # raise KeyError with the original key value
>           raise KeyError(key) from None
E           KeyError: 'GIT_AUTHOR_NAME'

../purepython/cpython-3.9/Lib/os.py:679: KeyError
----------------------------- Captured stdout call -----------------------------
pre-commit installed at .git/hooks/pre-commit
___________________________ test_installed_from_venv ___________________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x152825f7fdc0>
store = <pre_commit.store.Store object at 0x152825f60e60>

    def test_installed_from_venv(tempdir_factory, store):
        path = make_consuming_repo(tempdir_factory, 'script_hooks_repo')
        with cwd(path):
            install(C.CONFIG_FILE, store, hook_types=['pre-commit'])
            # No environment so pre-commit is not on the path when running!
            # Should still pick up the python from when we installed
            ret, output = _get_commit_output(
                tempdir_factory,
                env={
                    'HOME': os.path.expanduser('~'),
                    'PATH': _path_without_us(),
                    'TERM': os.environ.get('TERM', ''),
                    # Windows needs this to import `random`
                    'SYSTEMROOT': os.environ.get('SYSTEMROOT', ''),
                    # Windows needs this to resolve executables
                    'PATHEXT': os.environ.get('PATHEXT', ''),
                    # Git needs this to make a commit
>                   'GIT_AUTHOR_NAME': os.environ['GIT_AUTHOR_NAME'],
                    'GIT_COMMITTER_NAME': os.environ['GIT_COMMITTER_NAME'],
                    'GIT_AUTHOR_EMAIL': os.environ['GIT_AUTHOR_EMAIL'],
                    'GIT_COMMITTER_EMAIL': os.environ['GIT_COMMITTER_EMAIL'],
                },
            )

tests/commands/install_uninstall_test.py:541: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = environ({'CONDA_SHLVL': '2', 'LD_LIBRARY_PATH': '/home/user/g09/g09/bsd:/home/user/g09/g09/local:/home/user/g09/g09/ex...'PRE_COMMIT': '1', 'PYTEST_CURRENT_TEST': 'tests/commands/install_uninstall_test.py::test_installed_from_venv (call)'})
key = 'GIT_AUTHOR_NAME'

    def __getitem__(self, key):
        try:
            value = self._data[self.encodekey(key)]
        except KeyError:
            # raise KeyError with the original key value
>           raise KeyError(key) from None
E           KeyError: 'GIT_AUTHOR_NAME'

../purepython/cpython-3.9/Lib/os.py:679: KeyError
----------------------------- Captured stdout call -----------------------------
pre-commit installed at .git/hooks/pre-commit
______________________ test_pre_merge_commit_integration _______________________

tempdir_factory = <tests.conftest.tempdir_factory.<locals>.TmpdirFactory object at 0x1528204cec80>
store = <pre_commit.store.Store object at 0x1528204ceeb0>

    def test_pre_merge_commit_integration(tempdir_factory, store):
        output_pattern = re_assert.Matches(
            r'^\[INFO\] Initializing environment for .+\n'
            r'Bash hook\.+Passed\n'
            r"Merge made by the '(ort|recursive)' strategy.\n"
            r' foo \| 0\n'
            r' 1 file changed, 0 insertions\(\+\), 0 deletions\(-\)\n'
            r' create mode 100644 foo\n$',
        )
    
        path = make_consuming_repo(tempdir_factory, 'script_hooks_repo')
        with cwd(path):
            ret = install(C.CONFIG_FILE, store, hook_types=['pre-merge-commit'])
            assert ret == 0
    
            cmd_output('git', 'checkout', 'master', '-b', 'feature')
            _get_commit_output(tempdir_factory)
            cmd_output('git', 'checkout', 'master')
            ret, output, _ = cmd_output_mocked_pre_commit_home(
                'git', 'merge', '--no-ff', '--no-edit', 'feature',
                tempdir_factory=tempdir_factory,
            )
            assert ret == 0
>           output_pattern.assert_matches(output)

tests/commands/install_uninstall_test.py:996: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = Matches("^\\[INFO\\] Initializing environment for .+\\nBash hook\\.+Passed\\nMerge made by the '(ort|recursive)' strat...rategy.
    #  ^
    #>  foo | 0
    #>  1 file changed, 0 insertions(+), 0 deletions(-)
    #>  create mode 100644 foo
s = "Merge made by the 'recursive' strategy.\n foo | 0\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 foo\n"

    def assert_matches(self, s: str) -> None:
>       assert self == s, self._fail
E       AssertionError:  regex failed to match at:
E       
E       > Merge made by the 'recursive' strategy.
E         ^
E       >  foo | 0
E       >  1 file changed, 0 insertions(+), 0 deletions(-)
E       >  create mode 100644 foo

../purepython/cpython-3.9/my_purepy/lib/python3.9/site-packages/re_assert.py:63: AssertionError
----------------------------- Captured stdout call -----------------------------
pre-commit installed at .git/hooks/pre-merge-commit
______________________________ test_coursier_hook ______________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_coursier_hook0')

    def test_coursier_hook(tmp_path):
        echo_java_json = '''\
    {
      "repositories": ["central"],
      "dependencies": ["io.get-coursier:echo:latest.stable"]
    }
    '''
    
        channel_dir = tmp_path.joinpath('.pre-commit-channel')
        channel_dir.mkdir()
        channel_dir.joinpath('echo-java.json').write_text(echo_java_json)
    
>       ret = run_language(
            tmp_path,
            coursier,
            'echo-java',
            args=('Hello', 'World', 'from', 'coursier'),
        )

tests/languages/coursier_test.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

prefix = Prefix(prefix_dir='/tmp/pytest-of-user/pytest-363/test_coursier_hook0')
version = 'default', additional_dependencies = ()

    def install_environment(
            prefix: Prefix,
            version: str,
            additional_dependencies: Sequence[str],
    ) -> None:
        lang_base.assert_version_default('coursier', version)
    
        # Support both possible executable names (either "cs" or "coursier")
        cs = find_executable('cs') or find_executable('coursier')
        if cs is None:
>           raise AssertionError(
                'pre-commit requires system-installed "cs" or "coursier" '
                'executables in the application search path',
            )
E           AssertionError: pre-commit requires system-installed "cs" or "coursier" executables in the application search path

pre_commit/languages/coursier.py:33: AssertionError
__________________ test_coursier_hook_additional_dependencies __________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_coursier_hook_additional_0')

    def test_coursier_hook_additional_dependencies(tmp_path):
>       ret = run_language(
            tmp_path,
            coursier,
            'scalafmt --version',
            deps=('scalafmt:3.6.1',),
        )

tests/languages/coursier_test.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

prefix = Prefix(prefix_dir='/tmp/pytest-of-user/pytest-363/test_coursier_hook_additional_0')
version = 'default', additional_dependencies = ('scalafmt:3.6.1',)

    def install_environment(
            prefix: Prefix,
            version: str,
            additional_dependencies: Sequence[str],
    ) -> None:
        lang_base.assert_version_default('coursier', version)
    
        # Support both possible executable names (either "cs" or "coursier")
        cs = find_executable('cs') or find_executable('coursier')
        if cs is None:
>           raise AssertionError(
                'pre-commit requires system-installed "cs" or "coursier" '
                'executables in the application search path',
            )
E           AssertionError: pre-commit requires system-installed "cs" or "coursier" executables in the application search path

pre_commit/languages/coursier.py:33: AssertionError
_______________________ test_error_if_no_deps_or_channel _______________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_error_if_no_deps_or_chann0')

    def test_error_if_no_deps_or_channel(tmp_path):
        with pytest.raises(FatalError) as excinfo:
>           run_language(tmp_path, coursier, 'dne')

tests/languages/coursier_test.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

prefix = Prefix(prefix_dir='/tmp/pytest-of-user/pytest-363/test_error_if_no_deps_or_chann0')
version = 'default', additional_dependencies = ()

    def install_environment(
            prefix: Prefix,
            version: str,
            additional_dependencies: Sequence[str],
    ) -> None:
        lang_base.assert_version_default('coursier', version)
    
        # Support both possible executable names (either "cs" or "coursier")
        cs = find_executable('cs') or find_executable('coursier')
        if cs is None:
>           raise AssertionError(
                'pre-commit requires system-installed "cs" or "coursier" '
                'executables in the application search path',
            )
E           AssertionError: pre-commit requires system-installed "cs" or "coursier" executables in the application search path

pre_commit/languages/coursier.py:33: AssertionError
__________________________________ test_dart ___________________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_dart0')

    def test_dart(tmp_path):
        pubspec_yaml = '''\
    environment:
      sdk: '>=2.10.0 <3.0.0'
    
    name: hello_world_dart
    
    executables:
        hello-world-dart:
    
    dependencies:
      ansicolor: ^2.0.1
    '''
        hello_world_dart_dart = '''\
    import 'package:ansicolor/ansicolor.dart';
    
    void main() {
        AnsiPen pen = new AnsiPen()..red();
        print("hello hello " + pen("world"));
    }
    '''
        tmp_path.joinpath('pubspec.yaml').write_text(pubspec_yaml)
        bin_dir = tmp_path.joinpath('bin')
        bin_dir.mkdir()
        bin_dir.joinpath('hello-world-dart.dart').write_text(hello_world_dart_dart)
    
        expected = (0, b'hello hello world\n')
>       assert run_language(tmp_path, dart, 'hello-world-dart') == expected

tests/languages/dart_test.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/dart.py:70: in install_environment
    _install_dir(prefix, tmp)
pre_commit/languages/dart.py:54: in _install_dir
    lang_base.setup_cmd(prefix_p, ('dart', 'pub', 'get'), env=dart_env)
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True, cmd = ('dart', 'pub', 'get')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_dart0', 'env': {'CAML_LD_LIBRARY_PATH': '/home/user/.opam/3.12.1/lib/stub...ome/user/anaconda3/bin/conda', 'CONDA_PREFIX': '/home/user/anaconda3/envs/raise', ...}, 'stderr': -1, 'stdin': -1, ...}
returncode = 1, stdout_b = b'Executable `dart` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('dart', 'pub', 'get')
E           return code: 1
E           stdout:
E               Executable `dart` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
__________________________ test_dart_additional_deps ___________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_dart_additional_deps0')

    def test_dart_additional_deps(tmp_path):
        _make_local_repo(str(tmp_path))
    
>       ret = run_language(
            tmp_path,
            dart,
            'hello-world-dart',
            deps=('hello_world_dart',),
        )

tests/languages/dart_test.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/dart.py:70: in install_environment
    _install_dir(prefix, tmp)
pre_commit/languages/dart.py:54: in _install_dir
    lang_base.setup_cmd(prefix_p, ('dart', 'pub', 'get'), env=dart_env)
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True, cmd = ('dart', 'pub', 'get')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_dart_additional_deps0', 'env': {'CAML_LD_LIBRARY_PATH': '/home/user/.opam...ome/user/anaconda3/bin/conda', 'CONDA_PREFIX': '/home/user/anaconda3/envs/raise', ...}, 'stderr': -1, 'stdin': -1, ...}
returncode = 1, stdout_b = b'Executable `dart` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('dart', 'pub', 'get')
E           return code: 1
E           stdout:
E               Executable `dart` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
_____________________ test_dart_additional_deps_versioned ______________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_dart_additional_deps_vers0')

    def test_dart_additional_deps_versioned(tmp_path):
        _make_local_repo(str(tmp_path))
    
>       ret, out = run_language(
            tmp_path,
            dart,
            'secure-random -l 4 -b 16',
            deps=('encrypt:5.0.0',),
        )

tests/languages/dart_test.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/dart.py:70: in install_environment
    _install_dir(prefix, tmp)
pre_commit/languages/dart.py:54: in _install_dir
    lang_base.setup_cmd(prefix_p, ('dart', 'pub', 'get'), env=dart_env)
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True, cmd = ('dart', 'pub', 'get')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_dart_additional_deps_vers0', 'env': {'CAML_LD_LIBRARY_PATH': '/home/user/...ome/user/anaconda3/bin/conda', 'CONDA_PREFIX': '/home/user/anaconda3/envs/raise', ...}, 'stderr': -1, 'stdin': -1, ...}
returncode = 1, stdout_b = b'Executable `dart` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('dart', 'pub', 'get')
E           return code: 1
E           stdout:
E               Executable `dart` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
____________________ test_docker_image_hook_via_entrypoint _____________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_docker_image_hook_via_ent0')

    @xfailif_windows  # pragma: win32 no cover
    def test_docker_image_hook_via_entrypoint(tmp_path):
        ret = run_language(
            tmp_path,
            docker_image,
            '--entrypoint echo ubuntu:22.04',
            args=('hello hello world',),
        )
>       assert ret == (0, b'hello hello world\n')
E       AssertionError: assert (126, b'docke... --help\'.\n') == (0, b'hello hello world\n')
E         At index 0 diff: 126 != 0
E         Use -v to get more diff

tests/languages/docker_image_test.py:16: AssertionError
_______________________ test_docker_image_hook_via_args ________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_docker_image_hook_via_arg0')

    @xfailif_windows  # pragma: win32 no cover
    def test_docker_image_hook_via_args(tmp_path):
        ret = run_language(
            tmp_path,
            docker_image,
            'ubuntu:22.04 echo',
            args=('hello hello world',),
        )
>       assert ret == (0, b'hello hello world\n')
E       AssertionError: assert (126, b'docke... --help\'.\n') == (0, b'hello hello world\n')
E         At index 0 diff: 126 != 0
E         Use -v to get more diff

tests/languages/docker_image_test.py:27: AssertionError
_______________________________ test_docker_hook _______________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_docker_hook0')

    @xfailif_windows  # pragma: win32 no cover
    def test_docker_hook(tmp_path):
        dockerfile = '''\
    FROM ubuntu:22.04
    CMD ["echo", "This is overwritten by the entry"']
    '''
        tmp_path.joinpath('Dockerfile').write_text(dockerfile)
    
>       ret = run_language(tmp_path, docker, 'echo hello hello world')

tests/languages/docker_test.py:196: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/docker.py:100: in install_environment
    build_docker_image(prefix, pull=True)
pre_commit/languages/docker.py:87: in build_docker_image
    lang_base.setup_cmd(prefix, cmd)
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/usr/bin/docker', 'build', '--tag', 'pre-commit-fd1239095ee6804e2611d00bb2a91210', '--label', 'PRE_COMMIT', ...)
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_docker_hook0', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 1, stdout_b = b''
stderr_b = b'Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post "http...5ee6804e2611d00bb2a91210&target=&ulimits=null&version=1": dial unix /var/run/docker.sock: connect: permission denied\n'
proc = <Popen: returncode: 1 args: ('/usr/bin/docker', 'build', '--tag', 'pre-commi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/usr/bin/docker', 'build', '--tag', 'pre-commit-fd1239095ee6804e2611d00bb2a91210', '--label', 'PRE_COMMIT', '--pull', '.')
E           return code: 1
E           stdout: (none)
E           stderr:
E               Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post "http://%2Fvar%2Frun%2Fdocker.sock/v1.24/build?buildargs=%7B%7D&cachefrom=%5B%5D&cgroupparent=&cpuperiod=0&cpuquota=0&cpusetcpus=&cpusetmems=&cpushares=0&dockerfile=Dockerfile&labels=%7B%22PRE_COMMIT%22%3A%22%22%7D&memory=0&memswap=0&networkmode=default&pull=1&rm=1&shmsize=0&t=pre-commit-fd1239095ee6804e2611d00bb2a91210&target=&ulimits=null&version=1": dial unix /var/run/docker.sock: connect: permission denied

pre_commit/util.py:110: CalledProcessError
______________________________ test_dotnet_csproj ______________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_dotnet_csproj0')

    def test_dotnet_csproj(tmp_path):
        csproj = _csproj('testeroni')
        _write_program_cs(tmp_path)
        tmp_path.joinpath('dotnet_csproj.csproj').write_text(csproj)
>       ret = run_language(tmp_path, dotnet, 'testeroni')

tests/languages/dotnet_test.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/dotnet.py:67: in install_environment
    lang_base.setup_cmd(
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('dotnet', 'pack', '--configuration', 'Release', '--property', 'PackageOutputPath=/tmp/pytest-of-user/pytest-363/test_dotnet_csproj0/pre-commit-build')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_dotnet_csproj0', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 1, stdout_b = b'Executable `dotnet` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('dotnet', 'pack', '--configuration', 'Release', '--property', 'PackageOutputPath=/tmp/pytest-of-user/pytest-363/test_dotnet_csproj0/pre-commit-build')
E           return code: 1
E           stdout:
E               Executable `dotnet` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
__________________________ test_dotnet_csproj_prefix ___________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_dotnet_csproj_prefix0')

    def test_dotnet_csproj_prefix(tmp_path):
        csproj = _csproj('testeroni.tool')
        _write_program_cs(tmp_path)
        tmp_path.joinpath('dotnet_hooks_csproj_prefix.csproj').write_text(csproj)
>       ret = run_language(tmp_path, dotnet, 'testeroni.tool')

tests/languages/dotnet_test.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/dotnet.py:67: in install_environment
    lang_base.setup_cmd(
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('dotnet', 'pack', '--configuration', 'Release', '--property', 'PackageOutputPath=/tmp/pytest-of-user/pytest-363/test_dotnet_csproj_prefix0/pre-commit-build')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_dotnet_csproj_prefix0', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 1, stdout_b = b'Executable `dotnet` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('dotnet', 'pack', '--configuration', 'Release', '--property', 'PackageOutputPath=/tmp/pytest-of-user/pytest-363/test_dotnet_csproj_prefix0/pre-commit-build')
E           return code: 1
E           stdout:
E               Executable `dotnet` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
_______________________________ test_dotnet_sln ________________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_dotnet_sln0')

    def test_dotnet_sln(tmp_path):
        csproj = _csproj('testeroni')
        sln = '''\
    Microsoft Visual Studio Solution File, Format Version 12.00
    # Visual Studio 15
    VisualStudioVersion = 15.0.26124.0
    MinimumVisualStudioVersion = 15.0.26124.0
    Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "dotnet_hooks_sln_repo", "dotnet_hooks_sln_repo.csproj", "{6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}"
    EndProject
    Global
            GlobalSection(SolutionConfigurationPlatforms) = preSolution
                    Debug|Any CPU = Debug|Any CPU
                    Debug|x64 = Debug|x64
                    Debug|x86 = Debug|x86
                    Release|Any CPU = Release|Any CPU
                    Release|x64 = Release|x64
                    Release|x86 = Release|x86
            EndGlobalSection
            GlobalSection(SolutionProperties) = preSolution
                    HideSolutionNode = FALSE
            EndGlobalSection
            GlobalSection(ProjectConfigurationPlatforms) = postSolution
                    {6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
                    {6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}.Debug|Any CPU.Build.0 = Debug|Any CPU
                    {6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}.Debug|x64.ActiveCfg = Debug|Any CPU
                    {6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}.Debug|x64.Build.0 = Debug|Any CPU
                    {6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}.Debug|x86.ActiveCfg = Debug|Any CPU
                    {6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}.Debug|x86.Build.0 = Debug|Any CPU
                    {6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}.Release|Any CPU.ActiveCfg = Release|Any CPU
                    {6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}.Release|Any CPU.Build.0 = Release|Any CPU
                    {6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}.Release|x64.ActiveCfg = Release|Any CPU
                    {6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}.Release|x64.Build.0 = Release|Any CPU
                    {6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}.Release|x86.ActiveCfg = Release|Any CPU
                    {6568CFDB-6F6F-45A9-932C-8C7DAABC8E56}.Release|x86.Build.0 = Release|Any CPU
            EndGlobalSection
    EndGlobal
    '''  # noqa: E501
        _write_program_cs(tmp_path)
        tmp_path.joinpath('dotnet_hooks_sln_repo.csproj').write_text(csproj)
        tmp_path.joinpath('dotnet_hooks_sln_repo.sln').write_text(sln)
    
>       ret = run_language(tmp_path, dotnet, 'testeroni')

tests/languages/dotnet_test.py:96: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/dotnet.py:67: in install_environment
    lang_base.setup_cmd(
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('dotnet', 'pack', '--configuration', 'Release', '--property', 'PackageOutputPath=/tmp/pytest-of-user/pytest-363/test_dotnet_sln0/pre-commit-build')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_dotnet_sln0', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 1, stdout_b = b'Executable `dotnet` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('dotnet', 'pack', '--configuration', 'Release', '--property', 'PackageOutputPath=/tmp/pytest-of-user/pytest-363/test_dotnet_sln0/pre-commit-build')
E           return code: 1
E           stdout:
E               Executable `dotnet` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
___________________________ test_dotnet_combo_proj1 ____________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_dotnet_combo_proj10')

    def test_dotnet_combo_proj1(tmp_path):
        _setup_dotnet_combo(tmp_path)
>       ret = run_language(tmp_path, dotnet, 'proj1')

tests/languages/dotnet_test.py:147: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/dotnet.py:67: in install_environment
    lang_base.setup_cmd(
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('dotnet', 'pack', '--configuration', 'Release', '--property', 'PackageOutputPath=/tmp/pytest-of-user/pytest-363/test_dotnet_combo_proj10/pre-commit-build')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_dotnet_combo_proj10', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 1, stdout_b = b'Executable `dotnet` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('dotnet', 'pack', '--configuration', 'Release', '--property', 'PackageOutputPath=/tmp/pytest-of-user/pytest-363/test_dotnet_combo_proj10/pre-commit-build')
E           return code: 1
E           stdout:
E               Executable `dotnet` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
___________________________ test_dotnet_combo_proj2 ____________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_dotnet_combo_proj20')

    def test_dotnet_combo_proj2(tmp_path):
        _setup_dotnet_combo(tmp_path)
>       ret = run_language(tmp_path, dotnet, 'proj2')

tests/languages/dotnet_test.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/dotnet.py:67: in install_environment
    lang_base.setup_cmd(
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('dotnet', 'pack', '--configuration', 'Release', '--property', 'PackageOutputPath=/tmp/pytest-of-user/pytest-363/test_dotnet_combo_proj20/pre-commit-build')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_dotnet_combo_proj20', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 1, stdout_b = b'Executable `dotnet` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('dotnet', 'pack', '--configuration', 'Release', '--property', 'PackageOutputPath=/tmp/pytest-of-user/pytest-363/test_dotnet_combo_proj20/pre-commit-build')
E           return code: 1
E           stdout:
E               Executable `dotnet` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
______________________________ test_golang_system ______________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_golang_system0')

    def test_golang_system(tmp_path):
        _make_hello_world(tmp_path)
    
>       ret = run_language(tmp_path, golang, 'golang-hello-world')

tests/languages/golang_test.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/golang.py:152: in install_environment
    lang_base.setup_cmd(prefix, ('go', 'install', './...'), env=env)
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/tmp/pytest-of-user/pytest-363/test_golang_system0/golangenv-default/.go/bin/go', 'install', './...')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_golang_system0', 'env': {'CAML_LD_LIBRARY_PATH': '/home/user/.opam/3.12.1...ome/user/anaconda3/bin/conda', 'CONDA_PREFIX': '/home/user/anaconda3/envs/raise', ...}, 'stderr': -1, 'stdin': -1, ...}
returncode = 1, stdout_b = b''
stderr_b = b'go: downloading github.com/BurntSushi/toml v1.1.0\ngolang-hello-world/main.go:6:9: github.com/BurntSushi/toml@v1.1.0...proxy.golang.org/github.com/%21burnt%21sushi/toml/@v/v1.1.0.zip": dial tcp [2404:6800:4012:3::2011]:443: i/o timeout\n'
proc = <Popen: returncode: 1 args: ('/tmp/pytest-of-user/pytest-363/test_golang_sys...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/tmp/pytest-of-user/pytest-363/test_golang_system0/golangenv-default/.go/bin/go', 'install', './...')
E           return code: 1
E           stdout: (none)
E           stderr:
E               go: downloading github.com/BurntSushi/toml v1.1.0
E               golang-hello-world/main.go:6:9: github.com/BurntSushi/toml@v1.1.0: Get "https://proxy.golang.org/github.com/%21burnt%21sushi/toml/@v/v1.1.0.zip": dial tcp [2404:6800:4012:3::2011]:443: i/o timeout

pre_commit/util.py:110: CalledProcessError
_________________________ test_golang_default_version __________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_golang_default_version0')

    def test_golang_default_version(tmp_path):
        _make_hello_world(tmp_path)
    
>       ret = run_language(
            tmp_path,
            golang,
            'golang-hello-world',
            version=C.DEFAULT,
        )

tests/languages/golang_test.py:98: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/golang.py:152: in install_environment
    lang_base.setup_cmd(prefix, ('go', 'install', './...'), env=env)
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/tmp/pytest-of-user/pytest-363/test_golang_default_version0/golangenv-default/.go/bin/go', 'install', './...')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_golang_default_version0', 'env': {'CAML_LD_LIBRARY_PATH': '/home/user/.op...ome/user/anaconda3/bin/conda', 'CONDA_PREFIX': '/home/user/anaconda3/envs/raise', ...}, 'stderr': -1, 'stdin': -1, ...}
returncode = 1, stdout_b = b''
stderr_b = b'go: downloading github.com/BurntSushi/toml v1.1.0\ngolang-hello-world/main.go:6:9: github.com/BurntSushi/toml@v1.1.0...proxy.golang.org/github.com/%21burnt%21sushi/toml/@v/v1.1.0.zip": dial tcp [2404:6800:4012:3::2011]:443: i/o timeout\n'
proc = <Popen: returncode: 1 args: ('/tmp/pytest-of-user/pytest-363/test_golang_def...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/tmp/pytest-of-user/pytest-363/test_golang_default_version0/golangenv-default/.go/bin/go', 'install', './...')
E           return code: 1
E           stdout: (none)
E           stderr:
E               go: downloading github.com/BurntSushi/toml v1.1.0
E               golang-hello-world/main.go:6:9: github.com/BurntSushi/toml@v1.1.0: Get "https://proxy.golang.org/github.com/%21burnt%21sushi/toml/@v/v1.1.0.zip": dial tcp [2404:6800:4012:3::2011]:443: i/o timeout

pre_commit/util.py:110: CalledProcessError
______________________ test_local_golang_additional_deps _______________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_local_golang_additional_d0')

    def test_local_golang_additional_deps(tmp_path):
        _make_local_repo(str(tmp_path))
    
>       ret = run_language(
            tmp_path,
            golang,
            'hello',
            deps=('golang.org/x/example/hello@latest',),
        )

tests/languages/golang_test.py:124: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/golang.py:154: in install_environment
    lang_base.setup_cmd(prefix, ('go', 'install', dependency), env=env)
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/tmp/pytest-of-user/pytest-363/test_local_golang_additional_d0/golangenv-default/.go/bin/go', 'install', 'golang.org/x/example/hello@latest')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_local_golang_additional_d0', 'env': {'CAML_LD_LIBRARY_PATH': '/home/user/...ome/user/anaconda3/bin/conda', 'CONDA_PREFIX': '/home/user/anaconda3/envs/raise', ...}, 'stderr': -1, 'stdin': -1, ...}
returncode = 1, stdout_b = b''
stderr_b = b'go: golang.org/x/example/hello@latest: module golang.org/x/example/hello: Get "https://proxy.golang.org/golang.org/x/example/hello/@v/list": dial tcp [2404:6800:4012:3::2011]:443: i/o timeout\n'
proc = <Popen: returncode: 1 args: ('/tmp/pytest-of-user/pytest-363/test_local_gola...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/tmp/pytest-of-user/pytest-363/test_local_golang_additional_d0/golangenv-default/.go/bin/go', 'install', 'golang.org/x/example/hello@latest')
E           return code: 1
E           stdout: (none)
E           stderr:
E               go: golang.org/x/example/hello@latest: module golang.org/x/example/hello: Get "https://proxy.golang.org/golang.org/x/example/hello/@v/list": dial tcp [2404:6800:4012:3::2011]:443: i/o timeout

pre_commit/util.py:110: CalledProcessError
________________ test_golang_hook_still_works_when_gobin_is_set ________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_golang_hook_still_works_w0')

    def test_golang_hook_still_works_when_gobin_is_set(tmp_path):
        with envcontext((('GOBIN', str(tmp_path.joinpath('gobin'))),)):
>           test_golang_system(tmp_path)

tests/languages/golang_test.py:136: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/languages/golang_test.py:91: in test_golang_system
    ret = run_language(tmp_path, golang, 'golang-hello-world')
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/golang.py:152: in install_environment
    lang_base.setup_cmd(prefix, ('go', 'install', './...'), env=env)
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/tmp/pytest-of-user/pytest-363/test_golang_hook_still_works_w0/golangenv-default/.go/bin/go', 'install', './...')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_golang_hook_still_works_w0', 'env': {'CAML_LD_LIBRARY_PATH': '/home/user/...ome/user/anaconda3/bin/conda', 'CONDA_PREFIX': '/home/user/anaconda3/envs/raise', ...}, 'stderr': -1, 'stdin': -1, ...}
returncode = 1, stdout_b = b''
stderr_b = b'go: downloading github.com/BurntSushi/toml v1.1.0\ngolang-hello-world/main.go:6:9: github.com/BurntSushi/toml@v1.1.0...proxy.golang.org/github.com/%21burnt%21sushi/toml/@v/v1.1.0.zip": dial tcp [2404:6800:4012:3::2011]:443: i/o timeout\n'
proc = <Popen: returncode: 1 args: ('/tmp/pytest-of-user/pytest-363/test_golang_hoo...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/tmp/pytest-of-user/pytest-363/test_golang_hook_still_works_w0/golangenv-default/.go/bin/go', 'install', './...')
E           return code: 1
E           stdout: (none)
E           stderr:
E               go: downloading github.com/BurntSushi/toml v1.1.0
E               golang-hello-world/main.go:6:9: github.com/BurntSushi/toml@v1.1.0: Get "https://proxy.golang.org/github.com/%21burnt%21sushi/toml/@v/v1.1.0.zip": dial tcp [2404:6800:4012:3::2011]:443: i/o timeout

pre_commit/util.py:110: CalledProcessError
___________________________________ test_lua ___________________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_lua0')

    def test_lua(tmp_path):  # pragma: win32 no cover
        rockspec = '''\
    package = "hello"
    version = "dev-1"
    
    source = {
       url = "git+ssh://git@github.com/pre-commit/pre-commit.git"
    }
    description = {}
    dependencies = {}
    build = {
        type = "builtin",
        modules = {},
        install = {
            bin = {"bin/hello-world-lua"}
        },
    }
    '''
        hello_world_lua = '''\
    #!/usr/bin/env lua
    print('hello world')
    '''
        tmp_path.joinpath('hello-dev-1.rockspec').write_text(rockspec)
        bin_dir = tmp_path.joinpath('bin')
        bin_dir.mkdir()
        bin_file = bin_dir.joinpath('hello-world-lua')
        bin_file.write_text(hello_world_lua)
        make_executable(bin_file)
    
        expected = (0, b'hello world\n')
>       assert run_language(tmp_path, lua, 'hello-world-lua') == expected

tests/languages/lua_test.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/lua.py:61: in install_environment
    with in_env(prefix, version):
../purepython/cpython-3.9/Lib/contextlib.py:119: in __enter__
    return next(self.gen)
pre_commit/languages/lua.py:49: in in_env
    with envcontext(get_env_patch(envdir)):
pre_commit/languages/lua.py:29: in get_env_patch
    version = _get_lua_version()
pre_commit/languages/lua.py:24: in _get_lua_version
    _, stdout, _ = cmd_output('luarocks', 'config', '--lua-ver')
pre_commit/util.py:116: in cmd_output
    returncode, stdout_b, stderr_b = cmd_output_b(*cmd, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True, cmd = ('luarocks', 'config', '--lua-ver')
kwargs = {'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'Executable `luarocks` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('luarocks', 'config', '--lua-ver')
E           return code: 1
E           stdout:
E               Executable `luarocks` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
_______________________ test_lua_additional_dependencies _______________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_lua_additional_dependenci0')

    def test_lua_additional_dependencies(tmp_path):  # pragma: win32 no cover
>       ret, out = run_language(
            tmp_path,
            lua,
            'luacheck --version',
            deps=('luacheck',),
        )

tests/languages/lua_test.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/lua.py:61: in install_environment
    with in_env(prefix, version):
../purepython/cpython-3.9/Lib/contextlib.py:119: in __enter__
    return next(self.gen)
pre_commit/languages/lua.py:49: in in_env
    with envcontext(get_env_patch(envdir)):
pre_commit/languages/lua.py:29: in get_env_patch
    version = _get_lua_version()
pre_commit/languages/lua.py:24: in _get_lua_version
    _, stdout, _ = cmd_output('luarocks', 'config', '--lua-ver')
pre_commit/util.py:116: in cmd_output
    returncode, stdout_b, stderr_b = cmd_output_b(*cmd, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True, cmd = ('luarocks', 'config', '--lua-ver')
kwargs = {'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'Executable `luarocks` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('luarocks', 'config', '--lua-ver')
E           return code: 1
E           stdout:
E               Executable `luarocks` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
_______________________ test_node_hook_versions[default] _______________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_node_hook_versions_defaul0')
version = 'default'

    @pytest.mark.parametrize('version', (C.DEFAULT, '18.13.0'))
    def test_node_hook_versions(tmp_path, version):
        _make_hello_world(tmp_path)
>       ret = run_language(tmp_path, node, 'node-hello', version=version)

tests/languages/node_test.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/node.py:99: in install_environment
    lang_base.setup_cmd(prefix, local_install_cmd)
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/tmp/pytest-of-user/pytest-363/test_node_hook_versions_defaul0/node_env-default/bin/node', '/tmp/pytest-of-user/pyte...63/test_node_hook_versions_defaul0/node_env-default/bin/npm', 'install', '--dev', '--prod', '--ignore-prepublish', ...)
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_node_hook_versions_defaul0', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 1, stdout_b = b''
stderr_b = b"/tmp/pytest-of-user/pytest-363/test_node_hook_versions_defaul0/node_env-default/bin/node: /lib/x86_64-linux-gnu/libc...28' not found (required by /tmp/pytest-of-user/pytest-363/test_node_hook_versions_defaul0/node_env-default/bin/node)\n"
proc = <Popen: returncode: 1 args: ('/tmp/pytest-of-user/pytest-363/test_node_hook_...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/tmp/pytest-of-user/pytest-363/test_node_hook_versions_defaul0/node_env-default/bin/node', '/tmp/pytest-of-user/pytest-363/test_node_hook_versions_defaul0/node_env-default/bin/npm', 'install', '--dev', '--prod', '--ignore-prepublish', '--no-progress', '--no-save')
E           return code: 1
E           stdout: (none)
E           stderr:
E               /tmp/pytest-of-user/pytest-363/test_node_hook_versions_defaul0/node_env-default/bin/node: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.28' not found (required by /tmp/pytest-of-user/pytest-363/test_node_hook_versions_defaul0/node_env-default/bin/node)

pre_commit/util.py:110: CalledProcessError
_______________________ test_node_hook_versions[18.13.0] _______________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_node_hook_versions_18_13_0')
version = '18.13.0'

    @pytest.mark.parametrize('version', (C.DEFAULT, '18.13.0'))
    def test_node_hook_versions(tmp_path, version):
        _make_hello_world(tmp_path)
>       ret = run_language(tmp_path, node, 'node-hello', version=version)

tests/languages/node_test.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/node.py:99: in install_environment
    lang_base.setup_cmd(prefix, local_install_cmd)
pre_commit/lang_base.py:87: in setup_cmd
    cmd_output_b(*cmd, cwd=prefix.prefix_dir, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/tmp/pytest-of-user/pytest-363/test_node_hook_versions_18_13_0/node_env-18.13.0/bin/node', '/tmp/pytest-of-user/pyte...63/test_node_hook_versions_18_13_0/node_env-18.13.0/bin/npm', 'install', '--dev', '--prod', '--ignore-prepublish', ...)
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_node_hook_versions_18_13_0', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 1, stdout_b = b''
stderr_b = b"/tmp/pytest-of-user/pytest-363/test_node_hook_versions_18_13_0/node_env-18.13.0/bin/node: /lib/x86_64-linux-gnu/libc...28' not found (required by /tmp/pytest-of-user/pytest-363/test_node_hook_versions_18_13_0/node_env-18.13.0/bin/node)\n"
proc = <Popen: returncode: 1 args: ('/tmp/pytest-of-user/pytest-363/test_node_hook_...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/tmp/pytest-of-user/pytest-363/test_node_hook_versions_18_13_0/node_env-18.13.0/bin/node', '/tmp/pytest-of-user/pytest-363/test_node_hook_versions_18_13_0/node_env-18.13.0/bin/npm', 'install', '--dev', '--prod', '--ignore-prepublish', '--no-progress', '--no-save')
E           return code: 1
E           stdout: (none)
E           stderr:
E               /tmp/pytest-of-user/pytest-363/test_node_hook_versions_18_13_0/node_env-18.13.0/bin/node: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.28' not found (required by /tmp/pytest-of-user/pytest-363/test_node_hook_versions_18_13_0/node_env-18.13.0/bin/node)

pre_commit/util.py:110: CalledProcessError
_________________________ test_healthy_default_creator _________________________

python_dir = (Prefix(prefix_dir='/tmp/pytest-of-user/pytest-363/test_healthy_default_creator0/prefix'), local('/tmp/pytest-of-user/pytest-363/test_healthy_default_creator0'))

    def test_healthy_default_creator(python_dir):
        prefix, tmpdir = python_dir
    
>       python.install_environment(prefix, C.DEFAULT, ())

/home/user/pre-commit/tests/languages/python_test.py:94: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_healthy_default_creator0/prefix/py_env-default')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_healthy_default_creator0/prefix/py_env-default')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
__________________________ test_healthy_venv_creator ___________________________

python_dir = (Prefix(prefix_dir='/tmp/pytest-of-user/pytest-363/test_healthy_venv_creator0/prefix'), local('/tmp/pytest-of-user/pytest-363/test_healthy_venv_creator0'))

    def test_healthy_venv_creator(python_dir):
        # venv creator produces slightly different pyvenv.cfg
        prefix, tmpdir = python_dir
    
        with envcontext((('VIRTUALENV_CREATOR', 'venv'),)):
>           python.install_environment(prefix, C.DEFAULT, ())

/home/user/pre-commit/tests/languages/python_test.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_healthy_venv_creator0/prefix/py_env-default')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_healthy_venv_creator0/prefix/py_env-default')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
______________________ test_unhealthy_python_goes_missing ______________________

python_dir = (Prefix(prefix_dir='/tmp/pytest-of-user/pytest-363/test_unhealthy_python_goes_mis0/prefix'), local('/tmp/pytest-of-user/pytest-363/test_unhealthy_python_goes_mis0'))

    def test_unhealthy_python_goes_missing(python_dir):
        prefix, tmpdir = python_dir
    
>       python.install_environment(prefix, C.DEFAULT, ())

/home/user/pre-commit/tests/languages/python_test.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_unhealthy_python_goes_mis0/prefix/py_env-default')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_unhealthy_python_goes_mis0/prefix/py_env-default')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
______________________ test_unhealthy_with_version_change ______________________

python_dir = (Prefix(prefix_dir='/tmp/pytest-of-user/pytest-363/test_unhealthy_with_version_ch0/prefix'), local('/tmp/pytest-of-user/pytest-363/test_unhealthy_with_version_ch0'))

    def test_unhealthy_with_version_change(python_dir):
        prefix, tmpdir = python_dir
    
>       python.install_environment(prefix, C.DEFAULT, ())

/home/user/pre-commit/tests/languages/python_test.py:134: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_unhealthy_with_version_ch0/prefix/py_env-default')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_unhealthy_with_version_ch0/prefix/py_env-default')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
____________________ test_unhealthy_system_version_changes _____________________

python_dir = (Prefix(prefix_dir='/tmp/pytest-of-user/pytest-363/test_unhealthy_system_version_0/prefix'), local('/tmp/pytest-of-user/pytest-363/test_unhealthy_system_version_0'))

    def test_unhealthy_system_version_changes(python_dir):
        prefix, tmpdir = python_dir
    
>       python.install_environment(prefix, C.DEFAULT, ())

/home/user/pre-commit/tests/languages/python_test.py:150: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_unhealthy_system_version_0/prefix/py_env-default')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_unhealthy_system_version_0/prefix/py_env-default')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
________________________ test_unhealthy_old_virtualenv _________________________

python_dir = (Prefix(prefix_dir='/tmp/pytest-of-user/pytest-363/test_unhealthy_old_virtualenv0/prefix'), local('/tmp/pytest-of-user/pytest-363/test_unhealthy_old_virtualenv0'))

    def test_unhealthy_old_virtualenv(python_dir):
        prefix, tmpdir = python_dir
    
>       python.install_environment(prefix, C.DEFAULT, ())

/home/user/pre-commit/tests/languages/python_test.py:166: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_unhealthy_old_virtualenv0/prefix/py_env-default')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_unhealthy_old_virtualenv0/prefix/py_env-default')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
_______________________ test_unhealthy_unexpected_pyvenv _______________________

python_dir = (Prefix(prefix_dir='/tmp/pytest-of-user/pytest-363/test_unhealthy_unexpected_pyve0/prefix'), local('/tmp/pytest-of-user/pytest-363/test_unhealthy_unexpected_pyve0'))

    def test_unhealthy_unexpected_pyvenv(python_dir):
        prefix, tmpdir = python_dir
    
>       python.install_environment(prefix, C.DEFAULT, ())

/home/user/pre-commit/tests/languages/python_test.py:178: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_unhealthy_unexpected_pyve0/prefix/py_env-default')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_unhealthy_unexpected_pyve0/prefix/py_env-default')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
_________________________ test_unhealthy_then_replaced _________________________

python_dir = (Prefix(prefix_dir='/tmp/pytest-of-user/pytest-363/test_unhealthy_then_replaced0/prefix'), local('/tmp/pytest-of-user/pytest-363/test_unhealthy_then_replaced0'))

    def test_unhealthy_then_replaced(python_dir):
        prefix, tmpdir = python_dir
    
>       python.install_environment(prefix, C.DEFAULT, ())

/home/user/pre-commit/tests/languages/python_test.py:191: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/home/user/pre-commit/pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_unhealthy_then_replaced0/prefix/py_env-default')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_unhealthy_then_replaced0/prefix/py_env-default')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

/home/user/pre-commit/pre_commit/util.py:110: CalledProcessError
_____________________ test_language_versioned_python_hook ______________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_language_versioned_python0')

    def test_language_versioned_python_hook(tmp_path):
        setup_py = '''\
    from setuptools import setup
    setup(
        name='example',
        py_modules=['mod'],
        entry_points={'console_scripts': ['myexe=mod:main']},
    )
    '''
        tmp_path.joinpath('setup.py').write_text(setup_py)
        tmp_path.joinpath('mod.py').write_text('def main(): print("ohai")')
    
        # we patch this to force virtualenv executing with `-p` since we can't
        # reliably have multiple pythons available in CI
        with mock.patch.object(
                python,
                '_sys_executable_matches',
                return_value=False,
        ):
>           assert run_language(tmp_path, python, 'myexe') == (0, b'ohai\n')

tests/languages/python_test.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/python.py:212: in install_environment
    cmd_output_b(*venv_cmd, cwd='/')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_language_versioned_python0/py_env-python3.9', '-p', 'python3.9')
kwargs = {'cwd': '/', 'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-...PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local\n'
stderr_b = b''
proc = <Popen: returncode: 1 args: ('/home/user/purepython/cpython-3.9/my_purepy/bi...>

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('/home/user/purepython/cpython-3.9/my_purepy/bin/python', '-mvirtualenv', '/tmp/pytest-of-user/pytest-363/test_language_versioned_python0/py_env-python3.9', '-p', 'python3.9')
E           return code: 1
E           stdout:
E               RuntimeError: failed to detect cpython3.9.15-64|cpython3.9.15|cpython3.9-64|cpython3.9|cpython3-64|cpython3|cpython-64|cpython|CPython3.9.15-64|CPython3.9.15|CPython3.9-64|CPython3.9|CPython3-64|CPython3|CPython-64|CPython|CPYTHON3.9.15-64|CPYTHON3.9.15|CPYTHON3.9-64|CPYTHON3.9|CPYTHON3-64|CPYTHON3|CPYTHON-64|CPYTHON|python3.9.15-64|python3.9.15|python3.9-64|python3.9|python3-64|python3|python-64|python|PYTHON3.9.15-64|PYTHON3.9.15|PYTHON3.9-64|PYTHON3.9|PYTHON3-64|PYTHON3|PYTHON-64|PYTHON in /usr/local/bin:/usr/local
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
_________________________________ test_r_hook __________________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_r_hook0')

    def test_r_hook(tmp_path):
        renv_lock = '''\
    {
      "R": {
        "Version": "4.0.3",
        "Repositories": [
          {
            "Name": "CRAN",
            "URL": "https://cloud.r-project.org"
          }
        ]
      },
      "Packages": {
        "renv": {
          "Package": "renv",
          "Version": "0.12.5",
          "Source": "Repository",
          "Repository": "CRAN",
          "Hash": "5c0cdb37f063c58cdab3c7e9fbb8bd2c"
        },
        "rprojroot": {
          "Package": "rprojroot",
          "Version": "1.0",
          "Source": "Repository",
          "Repository": "CRAN",
          "Hash": "86704667fe0860e4fec35afdfec137f3"
        }
      }
    }
    '''
        description = '''\
    Package: gli.clu
    Title: What the Package Does (One Line, Title Case)
    Type: Package
    Version: 0.0.0.9000
    Authors@R:
        person(given = "First",
               family = "Last",
               role = c("aut", "cre"),
               email = "first.last@example.com",
               comment = c(ORCID = "YOUR-ORCID-ID"))
    Description: What the package does (one paragraph).
    License: `use_mit_license()`, `use_gpl3_license()` or friends to
        pick a license
    Encoding: UTF-8
    LazyData: true
    Roxygen: list(markdown = TRUE)
    RoxygenNote: 7.1.1
    Imports:
        rprojroot
    '''
        hello_world_r = '''\
    stopifnot(
        packageVersion('rprojroot') == '1.0',
        packageVersion('gli.clu') == '0.0.0.9000'
    )
    cat("Hello, World, from R!\n")
    '''
    
        tmp_path.joinpath('renv.lock').write_text(renv_lock)
        tmp_path.joinpath('DESCRIPTION').write_text(description)
        tmp_path.joinpath('hello-world.R').write_text(hello_world_r)
        renv_dir = tmp_path.joinpath('renv')
        renv_dir.mkdir()
        shutil.copy(
            os.path.join(
                os.path.dirname(__file__),
                '../../pre_commit/resources/empty_template_activate.R',
            ),
            renv_dir.joinpath('activate.R'),
        )
    
        expected = (0, b'Hello, World, from R!\n')
>       assert run_language(tmp_path, r, 'Rscript hello-world.R') == expected

tests/languages/r_test.py:203: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/r.py:130: in install_environment
    cmd_output_b(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('Rscript', '--vanilla', '-e', '    options(install.packages.compile.from.source = "never", pkgType = "binary")\n     ...on(...) FALSE\n        )\n        if (is_package) {\n            renv::install(prefix_dir)\n        }\n        \n    ')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_r_hook0/renv-default', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 1, stdout_b = b'Executable `Rscript` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('Rscript', '--vanilla', '-e', '    options(install.packages.compile.from.source = "never", pkgType = "binary")\n            prefix_dir <- \'/tmp/pytest-of-user/pytest-363/test_r_hook0\'\n        options(\n            repos = c(CRAN = "https://cran.rstudio.com"),\n            renv.consent = TRUE\n        )\n        source("renv/activate.R")\n        renv::restore()\n        activate_statement <- paste0(\n          \'suppressWarnings({\',\n          \'old <- setwd("\', getwd(), \'"); \',\n          \'source("renv/activate.R"); \',\n          \'setwd(old); \',\n          \'renv::load("\', getwd(), \'");})\'\n        )\n        writeLines(activate_statement, \'activate.R\')\n        is_package <- tryCatch(\n          {\n              path_desc <- file.path(prefix_dir, \'DESCRIPTION\')\n              suppressWarnings(desc <- read.dcf(path_desc))\n              "Package" %in% colnames(desc)\n          },\n          error = function(...) FALSE\n        )\n        if (is_package) {\n            renv::install(prefix_dir)\n        }\n        \n    ')
E           return code: 1
E           stdout:
E               Executable `Rscript` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
________________________________ test_r_inline _________________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_r_inline0')

    def test_r_inline(tmp_path):
        _make_local_repo(str(tmp_path))
    
        cmd = '''\
    Rscript -e '
        stopifnot(packageVersion("rprojroot") == "1.0")
        cat(commandArgs(trailingOnly = TRUE), "from R!\n", sep=", ")
    '
    '''
    
>       ret = run_language(
            tmp_path,
            r,
            cmd,
            deps=('rprojroot@1.0',),
            args=('hi', 'hello'),
        )

tests/languages/r_test.py:216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/r.py:130: in install_environment
    cmd_output_b(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('Rscript', '--vanilla', '-e', '    options(install.packages.compile.from.source = "never", pkgType = "binary")\n     ...on(...) FALSE\n        )\n        if (is_package) {\n            renv::install(prefix_dir)\n        }\n        \n    ')
kwargs = {'cwd': '/tmp/pytest-of-user/pytest-363/test_r_inline0/renv-default', 'stderr': -1, 'stdin': -1, 'stdout': -1}
returncode = 1, stdout_b = b'Executable `Rscript` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('Rscript', '--vanilla', '-e', '    options(install.packages.compile.from.source = "never", pkgType = "binary")\n            prefix_dir <- \'/tmp/pytest-of-user/pytest-363/test_r_inline0\'\n        options(\n            repos = c(CRAN = "https://cran.rstudio.com"),\n            renv.consent = TRUE\n        )\n        source("renv/activate.R")\n        renv::restore()\n        activate_statement <- paste0(\n          \'suppressWarnings({\',\n          \'old <- setwd("\', getwd(), \'"); \',\n          \'source("renv/activate.R"); \',\n          \'setwd(old); \',\n          \'renv::load("\', getwd(), \'");})\'\n        )\n        writeLines(activate_statement, \'activate.R\')\n        is_package <- tryCatch(\n          {\n              path_desc <- file.path(prefix_dir, \'DESCRIPTION\')\n              suppressWarnings(desc <- read.dcf(path_desc))\n              "Package" %in% colnames(desc)\n          },\n          error = function(...) FALSE\n        )\n        if (is_package) {\n            renv::install(prefix_dir)\n        }\n        \n    ')
E           return code: 1
E           stdout:
E               Executable `Rscript` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
____________________________ test_ruby_hook_system _____________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_ruby_hook_system0')

    def test_ruby_hook_system(tmp_path):
>       assert ruby.get_default_version() == 'system'
E       AssertionError: assert 'default' == 'system'
E         - system
E         + default

tests/languages/ruby_test.py:71: AssertionError
_______________________ test_ruby_with_user_install_set ________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_ruby_with_user_install_se0')

    def test_ruby_with_user_install_set(tmp_path):
        gemrc = tmp_path.joinpath('gemrc')
        gemrc.write_text('gem: --user-install\n')
    
        with envcontext((('GEMRC', str(gemrc)),)):
>           test_ruby_hook_system(tmp_path)

tests/languages/ruby_test.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_ruby_with_user_install_se0')

    def test_ruby_hook_system(tmp_path):
>       assert ruby.get_default_version() == 'system'
E       AssertionError: assert 'default' == 'system'
E         - system
E         + default

tests/languages/ruby_test.py:71: AssertionError
__________________ test_language_version_with_rustup[default] __________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_language_version_with_rus0')
version = 'default'

    @pytest.mark.parametrize('version', (C.DEFAULT, '1.56.0'))
    def test_language_version_with_rustup(tmp_path, version):
>       assert parse_shebang.find_executable('rustup') is not None
E       AssertionError: assert None is not None
E        +  where None = <function find_executable at 0x1528cdebae10>('rustup')
E        +    where <function find_executable at 0x1528cdebae10> = parse_shebang.find_executable

tests/languages/rust_test.py:70: AssertionError
__________________ test_language_version_with_rustup[1.56.0] ___________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_language_version_with_rus1')
version = '1.56.0'

    @pytest.mark.parametrize('version', (C.DEFAULT, '1.56.0'))
    def test_language_version_with_rustup(tmp_path, version):
>       assert parse_shebang.find_executable('rustup') is not None
E       AssertionError: assert None is not None
E        +  where None = <function find_executable at 0x1528cdebae10>('rustup')
E        +    where <function find_executable at 0x1528cdebae10> = parse_shebang.find_executable

tests/languages/rust_test.py:70: AssertionError
_________ test_rust_cli_additional_dependencies[cli:shellharden:4.2.0] _________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_rust_cli_additional_depen0')
dep = 'cli:shellharden:4.2.0'

    @pytest.mark.parametrize('dep', ('cli:shellharden:4.2.0', 'cli:shellharden'))
    def test_rust_cli_additional_dependencies(tmp_path, dep):
        _make_local_repo(str(tmp_path))
    
        t_sh = tmp_path.joinpath('t.sh')
        t_sh.write_text('echo $hi\n')
    
>       assert rust.get_default_version() == 'system'
E       AssertionError: assert 'default' == 'system'
E         - system
E         + default

tests/languages/rust_test.py:85: AssertionError
____________ test_rust_cli_additional_dependencies[cli:shellharden] ____________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_rust_cli_additional_depen1')
dep = 'cli:shellharden'

    @pytest.mark.parametrize('dep', ('cli:shellharden:4.2.0', 'cli:shellharden'))
    def test_rust_cli_additional_dependencies(tmp_path, dep):
        _make_local_repo(str(tmp_path))
    
        t_sh = tmp_path.joinpath('t.sh')
        t_sh.write_text('echo $hi\n')
    
>       assert rust.get_default_version() == 'system'
E       AssertionError: assert 'default' == 'system'
E         - system
E         + default

tests/languages/rust_test.py:85: AssertionError
_____________________ test_run_lib_additional_dependencies _____________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_run_lib_additional_depend0')

    def test_run_lib_additional_dependencies(tmp_path):
        _make_hello_world(tmp_path)
    
        deps = ('shellharden:4.2.0', 'git-version')
        ret = run_language(tmp_path, rust, 'hello_world', deps=deps)
        assert ret == (0, b'Hello, world!\n')
    
        bin_dir = tmp_path.joinpath('rustenv-system', 'bin')
>       assert bin_dir.is_dir()
E       AssertionError: assert False
E        +  where False = <bound method Path.is_dir of PosixPath('/tmp/pytest-of-user/pytest-363/test_run_lib_additional_depend0/rustenv-system/bin')>()
E        +    where <bound method Path.is_dir of PosixPath('/tmp/pytest-of-user/pytest-363/test_run_lib_additional_depend0/rustenv-system/bin')> = PosixPath('/tmp/pytest-of-user/pytest-363/test_run_lib_additional_depend0/rustenv-system/bin').is_dir

tests/languages/rust_test.py:104: AssertionError
_____________________________ test_swift_language ______________________________

tmp_path = PosixPath('/tmp/pytest-of-user/pytest-363/test_swift_language0')

    @pytest.mark.skipif(
        sys.platform == 'win32',
        reason='swift is not supported on windows',
    )
    def test_swift_language(tmp_path):  # pragma: win32 no cover
        package_swift = '''\
    // swift-tools-version:5.0
    import PackageDescription
    
    let package = Package(
        name: "swift_hooks_repo",
        targets: [.target(name: "swift_hooks_repo")]
    )
    '''
        tmp_path.joinpath('Package.swift').write_text(package_swift)
        src_dir = tmp_path.joinpath('Sources/swift_hooks_repo')
        src_dir.mkdir(parents=True)
        src_dir.joinpath('main.swift').write_text('print("Hello, world!")\n')
    
        expected = (0, b'Hello, world!\n')
>       assert run_language(tmp_path, swift, 'swift_hooks_repo') == expected

tests/languages/swift_test.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing/language_helpers.py:26: in run_language
    language.install_environment(prefix, version, deps)
pre_commit/languages/swift.py:45: in install_environment
    cmd_output_b(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

check = True
cmd = ('swift', 'build', '-C', '/tmp/pytest-of-user/pytest-363/test_swift_language0', '-c', 'release', ...)
kwargs = {'stderr': -1, 'stdin': -1, 'stdout': -1}, returncode = 1
stdout_b = b'Executable `swift` not found', stderr_b = None

    def cmd_output_b(
            *cmd: str,
            check: bool = True,
            **kwargs: Any,
    ) -> tuple[int, bytes, bytes | None]:
        _setdefault_kwargs(kwargs)
    
        try:
            cmd = parse_shebang.normalize_cmd(cmd, env=kwargs.get('env'))
        except parse_shebang.ExecutableNotFoundError as e:
            returncode, stdout_b, stderr_b = e.to_output()
        else:
            try:
                proc = subprocess.Popen(cmd, **kwargs)
            except OSError as e:
                returncode, stdout_b, stderr_b = _oserror_to_output(e)
            else:
                stdout_b, stderr_b = proc.communicate()
                returncode = proc.returncode
    
        if check and returncode:
>           raise CalledProcessError(returncode, cmd, stdout_b, stderr_b)
E           pre_commit.util.CalledProcessError: command: ('swift', 'build', '-C', '/tmp/pytest-of-user/pytest-363/test_swift_language0', '-c', 'release', '--build-path', '/tmp/pytest-of-user/pytest-363/test_swift_language0/swift_env-default/.build')
E           return code: 1
E           stdout:
E               Executable `swift` not found
E           stderr: (none)

pre_commit/util.py:110: CalledProcessError
=============================== warnings summary ===============================
../purepython/cpython-3.9/my_purepy/lib/python3.9/site-packages/_pytest/config/__init__.py:1294
  /home/user/purepython/cpython-3.9/my_purepy/lib/python3.9/site-packages/_pytest/config/__init__.py:1294: PytestConfigWarning: Unknown config option: env
  
    self._warn_or_fail_if_strict(f"Unknown config option: {key}\n")

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/git_test.py::test_intent_to_add - AssertionError: assert [] == [...
FAILED tests/git_test.py::test_status_output_with_rename - AssertionError: as...
FAILED tests/repository_test.py::test_python_hook - pre_commit.util.CalledPro...
FAILED tests/repository_test.py::test_python_hook_default_version - pre_commi...
FAILED tests/repository_test.py::test_python_hook_args_with_spaces - pre_comm...
FAILED tests/repository_test.py::test_python_hook_weird_setup_cfg - pre_commi...
FAILED tests/repository_test.py::test_python_venv_deprecation - pre_commit.ut...
FAILED tests/repository_test.py::test_additional_dependencies_roll_forward - ...
FAILED tests/repository_test.py::test_repository_state_compatibility[v1] - pr...
FAILED tests/repository_test.py::test_repository_state_compatibility[v2] - pr...
FAILED tests/repository_test.py::test_reinstall - pre_commit.util.CalledProce...
FAILED tests/repository_test.py::test_control_c_control_c_on_install - pre_co...
FAILED tests/repository_test.py::test_invalidated_virtualenv - pre_commit.uti...
FAILED tests/repository_test.py::test_really_long_file_paths - pre_commit.uti...
FAILED tests/repository_test.py::test_local_python_repo - pre_commit.util.Cal...
FAILED tests/repository_test.py::test_hook_id_not_present - NameError: name '...
FAILED tests/repository_test.py::test_too_new_version - NameError: name 'exit...
FAILED tests/repository_test.py::test_non_installable_hook_error_for_language_version
FAILED tests/repository_test.py::test_non_installable_hook_error_for_additional_dependencies
FAILED tests/staged_files_only_test.py::test_intent_to_add - AssertionError: ...
FAILED tests/store_test.py::test_clone_with_recursive_submodules - pre_commit...
FAILED tests/commands/install_uninstall_test.py::test_install_in_submodule_and_run
FAILED tests/commands/install_uninstall_test.py::test_environment_not_sourced
FAILED tests/commands/install_uninstall_test.py::test_installed_from_venv - K...
FAILED tests/commands/install_uninstall_test.py::test_pre_merge_commit_integration
FAILED tests/languages/coursier_test.py::test_coursier_hook - AssertionError:...
FAILED tests/languages/coursier_test.py::test_coursier_hook_additional_dependencies
FAILED tests/languages/coursier_test.py::test_error_if_no_deps_or_channel - A...
FAILED tests/languages/dart_test.py::test_dart - pre_commit.util.CalledProces...
FAILED tests/languages/dart_test.py::test_dart_additional_deps - pre_commit.u...
FAILED tests/languages/dart_test.py::test_dart_additional_deps_versioned - pr...
FAILED tests/languages/docker_image_test.py::test_docker_image_hook_via_entrypoint
FAILED tests/languages/docker_image_test.py::test_docker_image_hook_via_args
FAILED tests/languages/docker_test.py::test_docker_hook - pre_commit.util.Cal...
FAILED tests/languages/dotnet_test.py::test_dotnet_csproj - pre_commit.util.C...
FAILED tests/languages/dotnet_test.py::test_dotnet_csproj_prefix - pre_commit...
FAILED tests/languages/dotnet_test.py::test_dotnet_sln - pre_commit.util.Call...
FAILED tests/languages/dotnet_test.py::test_dotnet_combo_proj1 - pre_commit.u...
FAILED tests/languages/dotnet_test.py::test_dotnet_combo_proj2 - pre_commit.u...
FAILED tests/languages/golang_test.py::test_golang_system - pre_commit.util.C...
FAILED tests/languages/golang_test.py::test_golang_default_version - pre_comm...
FAILED tests/languages/golang_test.py::test_local_golang_additional_deps - pr...
FAILED tests/languages/golang_test.py::test_golang_hook_still_works_when_gobin_is_set
FAILED tests/languages/lua_test.py::test_lua - pre_commit.util.CalledProcessE...
FAILED tests/languages/lua_test.py::test_lua_additional_dependencies - pre_co...
FAILED tests/languages/node_test.py::test_node_hook_versions[default] - pre_c...
FAILED tests/languages/node_test.py::test_node_hook_versions[18.13.0] - pre_c...
FAILED tests/languages/python_test.py::test_healthy_default_creator - pre_com...
FAILED tests/languages/python_test.py::test_healthy_venv_creator - pre_commit...
FAILED tests/languages/python_test.py::test_unhealthy_python_goes_missing - p...
FAILED tests/languages/python_test.py::test_unhealthy_with_version_change - p...
FAILED tests/languages/python_test.py::test_unhealthy_system_version_changes
FAILED tests/languages/python_test.py::test_unhealthy_old_virtualenv - pre_co...
FAILED tests/languages/python_test.py::test_unhealthy_unexpected_pyvenv - pre...
FAILED tests/languages/python_test.py::test_unhealthy_then_replaced - pre_com...
FAILED tests/languages/python_test.py::test_language_versioned_python_hook - ...
FAILED tests/languages/r_test.py::test_r_hook - pre_commit.util.CalledProcess...
FAILED tests/languages/r_test.py::test_r_inline - pre_commit.util.CalledProce...
FAILED tests/languages/ruby_test.py::test_ruby_hook_system - AssertionError: ...
FAILED tests/languages/ruby_test.py::test_ruby_with_user_install_set - Assert...
FAILED tests/languages/rust_test.py::test_language_version_with_rustup[default]
FAILED tests/languages/rust_test.py::test_language_version_with_rustup[1.56.0]
FAILED tests/languages/rust_test.py::test_rust_cli_additional_dependencies[cli:shellharden:4.2.0]
FAILED tests/languages/rust_test.py::test_rust_cli_additional_dependencies[cli:shellharden]
FAILED tests/languages/rust_test.py::test_run_lib_additional_dependencies - A...
FAILED tests/languages/swift_test.py::test_swift_language - pre_commit.util.C...
ERROR tests/git_test.py::test_is_in_merge_conflict_submodule - pre_commit.uti...
ERROR tests/git_test.py::test_get_conflicted_files_in_submodule - pre_commit....
ERROR tests/staged_files_only_test.py::test_sub_staged - pre_commit.util.Call...
ERROR tests/staged_files_only_test.py::test_sub_nothing_unstaged - pre_commit...
ERROR tests/staged_files_only_test.py::test_sub_something_unstaged - pre_comm...
ERROR tests/staged_files_only_test.py::test_submodule_does_not_discard_changes
ERROR tests/staged_files_only_test.py::test_submodule_does_not_discard_changes_recurse
= 66 failed, 650 passed, 1 skipped, 3 xfailed, 1 warning, 7 errors in 3041.84s (0:50:41) =
Traceback (most recent call last):
  File "/home/user/thefuck-master/pre_run_biend.py", line 102, in <module>
    from lark import Lark
ModuleNotFoundError: No module named 'lark'
