 /home/user/networkx/networkx/relabel.py-_relabel_copy-193
networkx.classes.graph.Graph._node
    H._node.update((mapping.get(n, n), d.copy()) for n, d in G.nodes.items())
{'networkx.classes.coreviews.FilterAtlas', 'builtins.dict'}
 /home/user/networkx/networkx/classes/graph.py-clear-1535
networkx.classes.graph.Graph._node
        self._node.clear()
{'networkx.classes.coreviews.FilterAtlas', 'builtins.dict'}
 /home/user/networkx/networkx/classes/graph.py-clear-1534
networkx.classes.graph.Graph._adj
        self._adj.clear()
{'networkx.classes.coreviews.FilterAdjacency', 'builtins.dict'}
 /home/user/networkx/networkx/classes/digraph.py-clear-1196
networkx.classes.digraph.DiGraph._node
        self._node.clear()
{'networkx.classes.coreviews.FilterAtlas', 'builtins.dict'}
 /home/user/networkx/networkx/classes/digraph.py-clear-1194
networkx.classes.digraph.DiGraph._succ
        self._succ.clear()
{'networkx.classes.coreviews.FilterAdjacency', 'builtins.dict'}
 /home/user/networkx/networkx/classes/digraph.py-clear-1195
networkx.classes.digraph.DiGraph._pred
        self._pred.clear()
{'networkx.classes.coreviews.FilterAdjacency', 'builtins.dict'}
 /home/user/networkx/networkx/relabel.py-_relabel_copy-193
networkx.classes.multigraph.MultiGraph._node
    H._node.update((mapping.get(n, n), d.copy()) for n, d in G.nodes.items())
{'networkx.classes.coreviews.FilterAtlas', 'builtins.dict'}
 /home/user/networkx/networkx/classes/graph.py-clear-1535
networkx.classes.multigraph.MultiGraph._node
        self._node.clear()
{'networkx.classes.coreviews.FilterAtlas', 'builtins.dict'}
 /home/user/networkx/networkx/classes/graph.py-clear-1534
networkx.classes.multigraph.MultiGraph._adj
        self._adj.clear()
{'networkx.classes.coreviews.FilterMultiAdjacency', 'builtins.dict'}
 /home/user/networkx/networkx/classes/coreviews.py-__iter__-276
networkx.classes.coreviews.FilterAtlas.NODE_OK
            node_ok_shorter = 2 * len(self.NODE_OK.nodes) < len(self._atlas)
{'builtins.function', 'networkx.classes.filters.show_nodes'}
 /home/user/networkx/networkx/classes/coreviews.py-__iter__-280
networkx.classes.coreviews.FilterAtlas.NODE_OK
            return (n for n in self.NODE_OK.nodes if n in self._atlas)
{'builtins.function', 'networkx.classes.filters.show_nodes'}
