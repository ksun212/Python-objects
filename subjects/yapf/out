/home/user/thefuck-master/pre_run_biend.py:3771: DeprecationWarning: invalid escape sequence \s
  f.write('$t1 \sim_n t_2$ & ' + ' & '.join(M6C) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3781: DeprecationWarning: invalid escape sequence \s
  f.write('$t1 \sim_n t_2$ & ' + ' & '.join(O6C) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3805: DeprecationWarning: invalid escape sequence \ 
  f.write('$extenion\ set$ & ' + ' & '.join(EXT_SET) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3806: DeprecationWarning: invalid escape sequence \ 
  f.write('$extenion\ event$ & ' + ' & '.join(EXT_EVENT) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3933: DeprecationWarning: invalid escape sequence \_
  d_ = d.replace('_', '\_')
/home/user/thefuck-master/pre_run_biend.py:3944: DeprecationWarning: invalid escape sequence \s
  f.write('$t1 \sim_n t_2$ & ' + ' & '.join(M6[:10]) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3954: DeprecationWarning: invalid escape sequence \s
  f.write('$t1 \sim_n t_2$ & ' + ' & '.join(M6[10:]) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3966: DeprecationWarning: invalid escape sequence \s
  f.write('$t1 \sim_n t_2$ & ' + ' & '.join(M6ov[:10]) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:3978: DeprecationWarning: invalid escape sequence \s
  f.write('$t1 \sim_n t_2$ & ' + ' & '.join(M6ov[10:]) + '\\\\ \\hline' +'\n')
/home/user/thefuck-master/pre_run_biend.py:4100: DeprecationWarning: invalid escape sequence \_
  d_ = d.replace('_', '\_')
/home/user/purepython/cpython-3.9/my_purepy/lib/python3.9/site-packages/dash/testing/plugin.py:92: PytestDeprecationWarning: The hookimpl pytest_addhooks uses old-style configuration options (marks or attributes).
Please use the pytest.hookimpl(tryfirst=True) decorator instead
 to configure the hooks.
 See https://docs.pytest.org/en/latest/deprecations.html#configuring-hook-specs-impls-using-markers
  @pytest.mark.tryfirst
============================= test session starts ==============================
platform linux -- Python 3.9.15+, pytest-7.2.0, pluggy-1.0.0
rootdir: /home/user/yapf
plugins: mock-3.10.0, hypothesis-6.56.4, httpbin-1.0.2, cov-4.0.0, time-machine-2.9.0, html-3.2.0, Faker-15.3.4, anyio-3.6.2, flaky-3.7.0, hydra-core-1.3.2, xdist-3.2.1, test-utils-0.0.8, lazy-fixture-0.6.3, docker-1.0.1, xonsh-0.13.4, pylama-8.4.1, dash-2.9.1
collected 258 items

tests/blank_line_calculator_test.py .............                        [  5%]
tests/comment_splicer_test.py ................                           [ 11%]
tests/file_resources_test.py ....................................        [ 25%]
tests/format_decision_state_test.py ..                                   [ 25%]
tests/format_token_test.py .....                                         [ 27%]
tests/line_joiner_test.py ......                                         [ 30%]
tests/logical_line_test.py .....                                         [ 32%]
tests/main_test.py ......                                                [ 34%]
tests/reformatter_basic_test.py ........................................ [ 50%]
..............                                                           [ 55%]
tests/reformatter_python3_test.py .........................              [ 65%]
tests/reformatter_style_config_test.py .....                             [ 67%]
tests/reformatter_verify_test.py ssss                                    [ 68%]
tests/style_test.py .............................                        [ 79%]
tests/subtype_assigner_test.py ........                                  [ 82%]
tests/yapf_test.py .....................FFF....FFFFFFFFFFFFFF.F          [100%]

=================================== FAILURES ===================================
_______________ CommandLineTest.testDisableButAdjustIndentations _______________

self = <tests.yapf_test.CommandLineTest testMethod=testDisableButAdjustIndentations>

    def testDisableButAdjustIndentations(self):
      unformatted_code = textwrap.dedent("""\
          class SplitPenaltyTest(unittest.TestCase):
    
            def testUnbreakable(self):
              self._CheckPenalties(tree, [
              ])  # yapf: disable
          """)
      expected_formatted_code = textwrap.dedent("""\
          class SplitPenaltyTest(unittest.TestCase):
    
              def testUnbreakable(self):
                  self._CheckPenalties(tree, [
                  ])  # yapf: disable
          """)
>     self.assertYapfReformats(unformatted_code, expected_formatted_code)

tests/yapf_test.py:776: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
________________ CommandLineTest.testDisableWholeDataStructure _________________

self = <tests.yapf_test.CommandLineTest testMethod=testDisableWholeDataStructure>

    def testDisableWholeDataStructure(self):
      unformatted_code = textwrap.dedent("""\
          A = set([
              'hello',
              'world',
          ])  # yapf: disable
          """)
      expected_formatted_code = textwrap.dedent("""\
          A = set([
              'hello',
              'world',
          ])  # yapf: disable
          """)
>     self.assertYapfReformats(unformatted_code, expected_formatted_code)

tests/yapf_test.py:759: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
_________________ CommandLineTest.testDisabledMultilineStrings _________________

self = <tests.yapf_test.CommandLineTest testMethod=testDisabledMultilineStrings>

    def testDisabledMultilineStrings(self):
      unformatted_code = textwrap.dedent('''\
          foo=42
          def f():
              email_text += """<html>This is a really long docstring that goes over the column limit and is multi-line.<br><br>
          <b>Czar: </b>"""+despot["Nicholas"]+"""<br>
          <b>Minion: </b>"""+serf["Dmitri"]+"""<br>
          <b>Residence: </b>"""+palace["Winter"]+"""<br>
          </body>
          </html>"""
          ''')  # noqa
      expected_formatted_code = textwrap.dedent('''\
          foo = 42
          def f():
              email_text += """<html>This is a really long docstring that goes over the column limit and is multi-line.<br><br>
          <b>Czar: </b>"""+despot["Nicholas"]+"""<br>
          <b>Minion: </b>"""+serf["Dmitri"]+"""<br>
          <b>Residence: </b>"""+palace["Winter"]+"""<br>
          </body>
          </html>"""
          ''')  # noqa
>     self.assertYapfReformats(
          unformatted_code,
          expected_formatted_code,
          extra_options=['--lines', '1-1'])

tests/yapf_test.py:942: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
_____ CommandLineTest.testOmitFormattingLinesBeforeDisabledFunctionComment _____

self = <tests.yapf_test.CommandLineTest testMethod=testOmitFormattingLinesBeforeDisabledFunctionComment>

    def testOmitFormattingLinesBeforeDisabledFunctionComment(self):
      unformatted_code = textwrap.dedent("""\
          import sys
    
          # Comment
          def some_func(x):
              x = ["badly" , "formatted","line" ]
          """)
      expected_formatted_code = textwrap.dedent("""\
          import sys
    
          # Comment
          def some_func(x):
              x = ["badly", "formatted", "line"]
          """)
>     self.assertYapfReformats(
          unformatted_code,
          expected_formatted_code,
          extra_options=['--lines', '5-5'])

tests/yapf_test.py:652: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
______________________ CommandLineTest.testReadFromStdin _______________________

self = <tests.yapf_test.CommandLineTest testMethod=testReadFromStdin>

    def testReadFromStdin(self):
      unformatted_code = textwrap.dedent("""\
          def foo():
            x = 37
          """)
      expected_formatted_code = textwrap.dedent("""\
          def foo():
              x = 37
          """)
>     self.assertYapfReformats(unformatted_code, expected_formatted_code)

tests/yapf_test.py:516: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
_____________ CommandLineTest.testReadFromStdinWithEscapedStrings ______________

self = <tests.yapf_test.CommandLineTest testMethod=testReadFromStdinWithEscapedStrings>

    def testReadFromStdinWithEscapedStrings(self):
      unformatted_code = textwrap.dedent("""\
          s =   "foo\\nbar"
          """)
      expected_formatted_code = textwrap.dedent("""\
          s = "foo\\nbar"
          """)
>     self.assertYapfReformats(unformatted_code, expected_formatted_code)

tests/yapf_test.py:525: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
_______________ CommandLineTest.testReadSingleLineCodeFromStdin ________________

self = <tests.yapf_test.CommandLineTest testMethod=testReadSingleLineCodeFromStdin>

    def testReadSingleLineCodeFromStdin(self):
      unformatted_code = textwrap.dedent("""\
          if True: pass
          """)
      expected_formatted_code = textwrap.dedent("""\
          if True: pass
          """)
>     self.assertYapfReformats(unformatted_code, expected_formatted_code)

tests/yapf_test.py:587: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
________________ CommandLineTest.testReformattingSkippingLines _________________

self = <tests.yapf_test.CommandLineTest testMethod=testReformattingSkippingLines>

    def testReformattingSkippingLines(self):
      unformatted_code = textwrap.dedent("""\
          def h():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
          # yapf: disable
          def g():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
          # yapf: enable
          """)  # noqa
      expected_formatted_code = textwrap.dedent("""\
          def h():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and
                      xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
    
          # yapf: disable
          def g():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
          # yapf: enable
          """)  # noqa
>     self.assertYapfReformats(unformatted_code, expected_formatted_code)

tests/yapf_test.py:682: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
______________ CommandLineTest.testReformattingSkippingSingleLine ______________

self = <tests.yapf_test.CommandLineTest testMethod=testReformattingSkippingSingleLine>

    def testReformattingSkippingSingleLine(self):
      unformatted_code = textwrap.dedent("""\
          def h():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
          def g():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):  # yapf: disable
                  pass
          """)  # noqa
      expected_formatted_code = textwrap.dedent("""\
          def h():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and
                      xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
    
          def g():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):  # yapf: disable
                  pass
          """)  # noqa
>     self.assertYapfReformats(unformatted_code, expected_formatted_code)

tests/yapf_test.py:744: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
_____________ CommandLineTest.testReformattingSkippingToEndOfFile ______________

self = <tests.yapf_test.CommandLineTest testMethod=testReformattingSkippingToEndOfFile>

    def testReformattingSkippingToEndOfFile(self):
      unformatted_code = textwrap.dedent("""\
          def h():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
          # yapf: disable
          def g():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
          def f():
              def e():
                  while (xxxxxxxxxxxxxxxxxxxxx(yyyyyyyyyyyyy[zzzzz]) == 'aaaaaaaaaaa' and
                         xxxxxxxxxxxxxxxxxxxxx(yyyyyyyyyyyyy[zzzzz].aaaaaaaa[0]) ==
                         'bbbbbbb'):
                      pass
          """)  # noqa
      expected_formatted_code = textwrap.dedent("""\
          def h():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and
                      xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
    
          # yapf: disable
          def g():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
          def f():
              def e():
                  while (xxxxxxxxxxxxxxxxxxxxx(yyyyyyyyyyyyy[zzzzz]) == 'aaaaaaaaaaa' and
                         xxxxxxxxxxxxxxxxxxxxx(yyyyyyyyyyyyy[zzzzz].aaaaaaaa[0]) ==
                         'bbbbbbb'):
                      pass
          """)  # noqa
>     self.assertYapfReformats(unformatted_code, expected_formatted_code)

tests/yapf_test.py:721: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
________________ CommandLineTest.testReformattingSpecificLines _________________

self = <tests.yapf_test.CommandLineTest testMethod=testReformattingSpecificLines>

    def testReformattingSpecificLines(self):
      unformatted_code = textwrap.dedent("""\
          def h():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
    
          def g():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
          """)  # noqa
      expected_formatted_code = textwrap.dedent("""\
          def h():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and
                      xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
    
          def g():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
          """)  # noqa
      # TODO(ambv): the `expected_formatted_code` here is not PEP8 compliant,
      # raising "E129 visually indented line with same indent as next logical
      # line" with flake8.
>     self.assertYapfReformats(
          unformatted_code,
          expected_formatted_code,
          extra_options=['--lines', '1-2'])

tests/yapf_test.py:632: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
______________ CommandLineTest.testRetainingHorizontalWhitespace _______________

self = <tests.yapf_test.CommandLineTest testMethod=testRetainingHorizontalWhitespace>

    def testRetainingHorizontalWhitespace(self):
      unformatted_code = textwrap.dedent("""\
          def h():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
          def g():
              if (xxxxxxxxxxxx.yyyyyyyy        (zzzzzzzzzzzzz  [0]) ==     'aaaaaaaaaaa' and    xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):  # yapf: disable
                  pass
          """)  # noqa
      expected_formatted_code = textwrap.dedent("""\
          def h():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and
                      xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
    
          def g():
              if (xxxxxxxxxxxx.yyyyyyyy        (zzzzzzzzzzzzz  [0]) ==     'aaaaaaaaaaa' and    xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):  # yapf: disable
                  pass
          """)  # noqa
>     self.assertYapfReformats(unformatted_code, expected_formatted_code)

tests/yapf_test.py:799: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
__________ CommandLineTest.testRetainingSemicolonsWhenSpecifyingLines __________

self = <tests.yapf_test.CommandLineTest testMethod=testRetainingSemicolonsWhenSpecifyingLines>

    def testRetainingSemicolonsWhenSpecifyingLines(self):
      unformatted_code = textwrap.dedent("""\
          a = line_to_format
          def f():
              x = y + 42; z = n * 42
              if True: a += 1 ; b += 1 ; c += 1
          """)
      expected_formatted_code = textwrap.dedent("""\
          a = line_to_format
          def f():
              x = y + 42; z = n * 42
              if True: a += 1 ; b += 1 ; c += 1
          """)
>     self.assertYapfReformats(
          unformatted_code,
          expected_formatted_code,
          extra_options=['--lines', '1-1'])

tests/yapf_test.py:916: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
_______________ CommandLineTest.testRetainingVerticalWhitespace ________________

self = <tests.yapf_test.CommandLineTest testMethod=testRetainingVerticalWhitespace>

    def testRetainingVerticalWhitespace(self):
      unformatted_code = textwrap.dedent("""\
          def h():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
          def g():
    
    
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
    
                  pass
          """)  # noqa
      expected_formatted_code = textwrap.dedent("""\
          def h():
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and
                      xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
                  pass
    
          def g():
    
    
              if (xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0]) == 'aaaaaaaaaaa' and xxxxxxxxxxxx.yyyyyyyy(zzzzzzzzzzzzz[0].mmmmmmmm[0]) == 'bbbbbbb'):
    
                  pass
          """)  # noqa
>     self.assertYapfReformats(
          unformatted_code,
          expected_formatted_code,
          extra_options=['--lines', '1-2'])

tests/yapf_test.py:827: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
________________ CommandLineTest.testSetCustomStyleBasedOnYapf _________________

self = <tests.yapf_test.CommandLineTest testMethod=testSetCustomStyleBasedOnYapf>

    def testSetCustomStyleBasedOnYapf(self):
      unformatted_code = textwrap.dedent("""\
          def foo(): # trail
              x = 37
          """)
      expected_formatted_code = textwrap.dedent("""\
          def foo():    # trail
            x = 37
          """)
      style_file = textwrap.dedent(u'''\
          [style]
          based_on_style = yapf
          spaces_before_comment = 4
          ''')
      with utils.TempFileContents(self.test_tmpdir, style_file) as stylepath:
>       self.assertYapfReformats(
            unformatted_code,
            expected_formatted_code,
            extra_options=['--style={0}'.format(stylepath)])

tests/yapf_test.py:556: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
____________ CommandLineTest.testSetCustomStyleSpacesBeforeComment _____________

self = <tests.yapf_test.CommandLineTest testMethod=testSetCustomStyleSpacesBeforeComment>

    def testSetCustomStyleSpacesBeforeComment(self):
      unformatted_code = textwrap.dedent("""\
          a_very_long_statement_that_extends_way_beyond # Comment
          short # This is a shorter statement
          """)
      expected_formatted_code = textwrap.dedent("""\
          a_very_long_statement_that_extends_way_beyond # Comment
          short                                         # This is a shorter statement
          """)  # noqa
      style_file = textwrap.dedent(u'''\
          [style]
          spaces_before_comment = 15, 20
          ''')
      with utils.TempFileContents(self.test_tmpdir, style_file) as stylepath:
>       self.assertYapfReformats(
            unformatted_code,
            expected_formatted_code,
            extra_options=['--style={0}'.format(stylepath)])

tests/yapf_test.py:575: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
_______________________ CommandLineTest.testSetYapfStyle _______________________

self = <tests.yapf_test.CommandLineTest testMethod=testSetYapfStyle>

    def testSetYapfStyle(self):
      unformatted_code = textwrap.dedent("""\
          def foo(): # trail
              x = 37
          """)
      expected_formatted_code = textwrap.dedent("""\
          def foo():  # trail
            x = 37
          """)
>     self.assertYapfReformats(
          unformatted_code,
          expected_formatted_code,
          extra_options=['--style=yapf'])

tests/yapf_test.py:536: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
____ CommandLineTest.testVerticalSpacingWithCommentWithContinuationMarkers _____

self = <tests.yapf_test.CommandLineTest testMethod=testVerticalSpacingWithCommentWithContinuationMarkers>

      def testVerticalSpacingWithCommentWithContinuationMarkers(self):
        unformatted_code = """\
    # \\
    # \\
    # \\
    
    x = {
    }
    """
        expected_formatted_code = """\
    # \\
    # \\
    # \\
    
    x = {
    }
    """
>       self.assertYapfReformats(
            unformatted_code,
            expected_formatted_code,
            extra_options=['--lines', '1-1'])

tests/yapf_test.py:898: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/yapf_test.py:453: in assertYapfReformats
    self.assertEqual(stderrdata, b'')
E   AssertionError: b'/home/user/yapf/yapf/yapflib/errors.py:16[136 chars]ze\n' != b''
=============================== warnings summary ===============================
yapf/yapflib/errors.py:16
  /home/user/yapf/yapf/yapflib/errors.py:16: PendingDeprecationWarning: lib2to3 package is deprecated and may not be able to parse Python 3.10+
    from lib2to3.pgen2 import tokenize

tests/style_test.py::StyleFromFileTest::testPyprojectTomlNoYapfSection
  /home/user/purepython/cpython-3.9/Lib/unittest/case.py:550: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/tmpv30kjm0k/pyproject.toml' mode='w' encoding='UTF-8'>
    method()
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

tests/yapf_test.py::CommandLineTest::testSetCustomStyleBasedOnYapf
tests/yapf_test.py::CommandLineTest::testSetCustomStyleSpacesBeforeComment
  /home/user/purepython/cpython-3.9/Lib/unittest/case.py:592: ResourceWarning: unclosed file <_io.TextIOWrapper name=9 mode='w' encoding='utf-8'>
    self._callTestMethod(testMethod)
  Enable tracemalloc to get traceback where the object was allocated.
  See https://docs.pytest.org/en/stable/how-to/capture-warnings.html#resource-warnings for more info.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/yapf_test.py::CommandLineTest::testDisableButAdjustIndentations
FAILED tests/yapf_test.py::CommandLineTest::testDisableWholeDataStructure - A...
FAILED tests/yapf_test.py::CommandLineTest::testDisabledMultilineStrings - As...
FAILED tests/yapf_test.py::CommandLineTest::testOmitFormattingLinesBeforeDisabledFunctionComment
FAILED tests/yapf_test.py::CommandLineTest::testReadFromStdin - AssertionErro...
FAILED tests/yapf_test.py::CommandLineTest::testReadFromStdinWithEscapedStrings
FAILED tests/yapf_test.py::CommandLineTest::testReadSingleLineCodeFromStdin
FAILED tests/yapf_test.py::CommandLineTest::testReformattingSkippingLines - A...
FAILED tests/yapf_test.py::CommandLineTest::testReformattingSkippingSingleLine
FAILED tests/yapf_test.py::CommandLineTest::testReformattingSkippingToEndOfFile
FAILED tests/yapf_test.py::CommandLineTest::testReformattingSpecificLines - A...
FAILED tests/yapf_test.py::CommandLineTest::testRetainingHorizontalWhitespace
FAILED tests/yapf_test.py::CommandLineTest::testRetainingSemicolonsWhenSpecifyingLines
FAILED tests/yapf_test.py::CommandLineTest::testRetainingVerticalWhitespace
FAILED tests/yapf_test.py::CommandLineTest::testSetCustomStyleBasedOnYapf - A...
FAILED tests/yapf_test.py::CommandLineTest::testSetCustomStyleSpacesBeforeComment
FAILED tests/yapf_test.py::CommandLineTest::testSetYapfStyle - AssertionError...
FAILED tests/yapf_test.py::CommandLineTest::testVerticalSpacingWithCommentWithContinuationMarkers
====== 18 failed, 236 passed, 4 skipped, 4 warnings in 795.32s (0:13:15) =======
Traceback (most recent call last):
  File "/home/user/thefuck-master/pre_run_biend.py", line 102, in <module>
    from lark import Lark
ModuleNotFoundError: No module named 'lark'
